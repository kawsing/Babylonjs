{
  "version": 3,
  "sources": ["../../sourceES6/gui/src/2D/valueAndUnit.ts", "../../sourceES6/gui/src/2D/measure.ts", "../../sourceES6/gui/src/2D/math2D.ts", "../../sourceES6/gui/src/2D/controls/control.ts", "../../sourceES6/gui/src/2D/controls/container.ts", "../../sourceES6/gui/src/2D/controls/rectangle.ts", "../../sourceES6/gui/src/2D/controls/textBlock.ts", "../../sourceES6/gui/src/2D/controls/image.ts", "../../sourceES6/gui/src/2D/controls/button.ts", "../../sourceES6/gui/src/2D/controls/stackPanel.ts", "../../sourceES6/gui/src/2D/controls/checkbox.ts", "../../sourceES6/gui/src/2D/controls/textWrapper.ts", "../../sourceES6/gui/src/2D/controls/inputText.ts", "../../sourceES6/gui/src/2D/controls/grid.ts", "../../sourceES6/gui/src/2D/controls/colorpicker.ts", "../../sourceES6/gui/src/2D/controls/ellipse.ts", "../../sourceES6/gui/src/2D/controls/inputPassword.ts", "../../sourceES6/gui/src/2D/controls/line.ts", "../../sourceES6/gui/src/2D/multiLinePoint.ts", "../../sourceES6/gui/src/2D/controls/multiLine.ts", "../../sourceES6/gui/src/2D/controls/radioButton.ts", "../../sourceES6/gui/src/2D/controls/sliders/baseSlider.ts", "../../sourceES6/gui/src/2D/controls/sliders/slider.ts", "../../sourceES6/gui/src/2D/controls/selector.ts", "../../sourceES6/gui/src/2D/controls/scrollViewers/scrollViewerWindow.ts", "../../sourceES6/gui/src/2D/controls/sliders/scrollBar.ts", "../../sourceES6/gui/src/2D/controls/sliders/imageScrollBar.ts", "../../sourceES6/gui/src/2D/controls/scrollViewers/scrollViewer.ts", "../../sourceES6/gui/src/2D/controls/virtualKeyboard.ts", "../../sourceES6/gui/src/2D/controls/displayGrid.ts", "../../sourceES6/gui/src/2D/controls/sliders/imageBasedSlider.ts", "../../sourceES6/gui/src/2D/controls/statics.ts", "../../sourceES6/gui/src/2D/style.ts", "../../sourceES6/gui/src/2D/advancedDynamicTexture.ts", "../../sourceES6/gui/src/2D/adtInstrumentation.ts", "../../sourceES6/gui/src/2D/xmlLoader.ts", "../../sourceES6/gui/src/3D/vector3WithInfo.ts", "../../sourceES6/gui/src/3D/controls/control3D.ts", "../../sourceES6/gui/src/3D/controls/abstractButton3D.ts", "../../sourceES6/gui/src/3D/controls/button3D.ts", "../../sourceES6/gui/src/3D/controls/container3D.ts", "../../sourceES6/gui/src/3D/controls/volumeBasedPanel.ts", "../../sourceES6/gui/src/3D/controls/cylinderPanel.ts", "../../sourceES6/gui/src/3D/materials/shaders/fluent.vertex.ts", "../../sourceES6/gui/src/3D/materials/shaders/fluent.fragment.ts", "../../sourceES6/gui/src/3D/materials/fluentMaterial.ts", "../../sourceES6/gui/src/3D/controls/holographicButton.ts", "../../sourceES6/gui/src/3D/controls/meshButton3D.ts", "../../sourceES6/gui/src/3D/controls/planePanel.ts", "../../sourceES6/gui/src/3D/controls/scatterPanel.ts", "../../sourceES6/gui/src/3D/controls/spherePanel.ts", "../../sourceES6/gui/src/3D/controls/stackPanel3D.ts", "../../sourceES6/gui/src/3D/gui3DManager.ts"],
  "sourcesContent": ["import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see https://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit. This should be done cautiously as the GUi won't be marked as dirty with this function.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        this._value = value;\r\n        this.unit = unit;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @param decimals defines an optional number of decimals to display\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture, decimals?: number): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                let percentage = this.getValue(host) * 100;\r\n\r\n                return (decimals ? percentage.toFixed(decimals) : percentage) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                let pixels = this.getValue(host);\r\n                return (decimals ? pixels.toFixed(decimals) : pixels) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}", "import { Matrix2D } from \"./math2D\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nlet tmpRect = [\r\n    new Vector2(0, 0),\r\n    new Vector2(0, 0),\r\n    new Vector2(0, 0),\r\n    new Vector2(0, 0),\r\n];\r\n\r\nlet tmpRect2 = [\r\n    new Vector2(0, 0),\r\n    new Vector2(0, 0),\r\n    new Vector2(0, 0),\r\n    new Vector2(0, 0),\r\n];\r\n\r\nlet tmpV1 = new Vector2(0, 0);\r\nlet tmpV2 = new Vector2(0, 0);\r\n\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box measure for two given measures\r\n     * @param a Input measure\r\n     * @param b Input measure\r\n     * @param result the resulting bounding measure\r\n     */\r\n    public static CombineToRef(a: Measure, b: Measure, result: Measure) {\r\n        var left = Math.min(a.left, b.left);\r\n        var top = Math.min(a.top, b.top);\r\n        var right = Math.max(a.left + a.width, b.left + b.width);\r\n        var bottom = Math.max(a.top + a.height, b.top + b.height);\r\n        result.left = left;\r\n        result.top = top;\r\n        result.width = right - left;\r\n        result.height = bottom - top;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\r\n     * @param transform the matrix to transform the measure before computing the AABB\r\n     * @param addX number to add to left\r\n     * @param addY number to add to top\r\n     * @param addWidth number to add to width\r\n     * @param addHeight number to add to height\r\n     * @param result the resulting AABB\r\n     */\r\n    public addAndTransformToRef(transform: Matrix2D, addX: number, addY: number, addWidth: number, addHeight: number, result: Measure) {\r\n        const left = this.left + addX;\r\n        const top = this.top + addY;\r\n        const width = this.width + addWidth;\r\n        const height = this.height + addHeight;\r\n\r\n        tmpRect[0].copyFromFloats(left, top);\r\n        tmpRect[1].copyFromFloats(left + width, top);\r\n        tmpRect[2].copyFromFloats(left + width, top + height);\r\n        tmpRect[3].copyFromFloats(left, top + height);\r\n\r\n        tmpV1.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE);\r\n        tmpV2.copyFromFloats(0, 0);\r\n        for (var i = 0; i < 4; i++) {\r\n            transform.transformCoordinates(tmpRect[i].x, tmpRect[i].y, tmpRect2[i]);\r\n            tmpV1.x = Math.floor(Math.min(tmpV1.x, tmpRect2[i].x));\r\n            tmpV1.y = Math.floor(Math.min(tmpV1.y, tmpRect2[i].y));\r\n            tmpV2.x = Math.ceil(Math.max(tmpV2.x, tmpRect2[i].x));\r\n            tmpV2.y = Math.ceil(Math.max(tmpV2.y, tmpRect2[i].y));\r\n        }\r\n        result.left = tmpV1.x;\r\n        result.top = tmpV1.y;\r\n        result.width = tmpV2.x - tmpV1.x;\r\n        result.height = tmpV2.y - tmpV1.y;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\r\n     * @param transform the matrix to transform the measure before computing the AABB\r\n     * @param result the resulting AABB\r\n     */\r\n    public transformToRef(transform: Matrix2D, result: Measure) {\r\n        this.addAndTransformToRef(transform, 0, 0, 0, 0, result);\r\n    }\r\n        /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}", "import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Epsilon } from '@babylonjs/core/Maths/math.constants';\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}", "import { Nullable } from \"@babylonjs/core/types\";\nimport { Observable, Observer } from \"@babylonjs/core/Misc/observable\";\nimport { Vector2, Vector3, Matrix } from \"@babylonjs/core/Maths/math.vector\";\nimport { PointerEventTypes, PointerInfoBase } from '@babylonjs/core/Events/pointerEvents';\nimport { Logger } from \"@babylonjs/core/Misc/logger\";\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\nimport { Scene } from \"@babylonjs/core/scene\";\n\nimport { Container } from \"./container\";\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Measure } from \"../measure\";\nimport { Style } from \"../style\";\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\n\n/**\n * Root class used for all 2D controls\n * @see https://doc.babylonjs.com/how_to/gui#controls\n */\nexport class Control {\n    /**\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\n     */\n    public static AllowAlphaInheritance = false;\n\n    private _alpha = 1;\n    private _alphaSet = false;\n    private _zIndex = 0;\n    /** @hidden */\n    public _host: AdvancedDynamicTexture;\n    /** Gets or sets the control parent */\n    public parent: Nullable<Container>;\n    /** @hidden */\n    public _currentMeasure = Measure.Empty();\n    private _fontFamily = \"Arial\";\n    private _fontStyle = \"\";\n    private _fontWeight = \"\";\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\n    private _font: string;\n    /** @hidden */\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    /** @hidden */\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    /** @hidden */\n    protected _fontOffset: { ascent: number, height: number, descent: number };\n    private _color = \"\";\n    private _style: Nullable<Style> = null;\n    private _styleObserver: Nullable<Observer<Style>>;\n    /** @hidden */\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n    /** @hidden */\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n    /** @hidden */\n    protected _isDirty = true;\n    /** @hidden */\n    protected _wasDirty = false;\n    /** @hidden */\n    public _tempParentMeasure = Measure.Empty();\n    /** @hidden */\n    public _prevCurrentMeasureTransformedIntoGlobalSpace = Measure.Empty();\n    /** @hidden */\n    protected _cachedParentMeasure = Measure.Empty();\n    private _paddingLeft = new ValueAndUnit(0);\n    private _paddingRight = new ValueAndUnit(0);\n    private _paddingTop = new ValueAndUnit(0);\n    private _paddingBottom = new ValueAndUnit(0);\n    /** @hidden */\n    public _left = new ValueAndUnit(0);\n    /** @hidden */\n    public _top = new ValueAndUnit(0);\n    private _scaleX = 1.0;\n    private _scaleY = 1.0;\n    private _rotation = 0;\n    private _transformCenterX = 0.5;\n    private _transformCenterY = 0.5;\n    /** @hidden */\n    public _transformMatrix = Matrix2D.Identity();\n    /** @hidden */\n    protected _invertTransformMatrix = Matrix2D.Identity();\n    /** @hidden */\n    protected _transformedPosition = Vector2.Zero();\n    private _isMatrixDirty = true;\n    private _cachedOffsetX: number;\n    private _cachedOffsetY: number;\n    private _isVisible = true;\n    private _isHighlighted = false;\n    /** @hidden */\n    public _linkedMesh: Nullable<TransformNode>;\n    private _fontSet = false;\n    private _dummyVector2 = Vector2.Zero();\n    private _downCount = 0;\n    private _enterCount = -1;\n    private _doNotRender = false;\n    private _downPointerIds: { [id: number]: boolean } = {};\n    protected _isEnabled = true;\n    protected _disabledColor = \"#9a9a9a\";\n    protected _disabledColorItem = \"#6a6a6a\";\n    /** @hidden */\n    protected _rebuildLayout = false;\n\n    /** @hidden */\n    public _customData: any = {};\n\n    /** @hidden */\n    public _isClipped = false;\n\n    /** @hidden */\n    public _automaticSize = false;\n\n    /** @hidden */\n    public _tag: any;\n\n    /**\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\n     */\n    public uniqueId: number;\n\n    /**\n     * Gets or sets an object used to store user defined information for the node\n     */\n    public metadata: any = null;\n\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\n    public isHitTestVisible = true;\n    /** Gets or sets a boolean indicating if the control can block pointer events */\n    public isPointerBlocker = false;\n    /** Gets or sets a boolean indicating if the control can be focusable */\n    public isFocusInvisible = false;\n\n    /**\n     * Gets or sets a boolean indicating if the children are clipped to the current control bounds.\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\n     */\n    public clipChildren = true;\n\n    /**\n     * Gets or sets a boolean indicating that control content must be clipped\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\n     */\n    public clipContent = true;\n\n    /**\n     * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\n     */\n    public useBitmapCache = false;\n\n    private _cacheData: Nullable<ImageData>;\n\n    private _shadowOffsetX = 0;\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\n    public get shadowOffsetX() {\n        return this._shadowOffsetX;\n    }\n\n    public set shadowOffsetX(value: number) {\n        if (this._shadowOffsetX === value) {\n            return;\n        }\n\n        this._shadowOffsetX = value;\n        this._markAsDirty();\n    }\n\n    private _shadowOffsetY = 0;\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\n    public get shadowOffsetY() {\n        return this._shadowOffsetY;\n    }\n\n    public set shadowOffsetY(value: number) {\n        if (this._shadowOffsetY === value) {\n            return;\n        }\n\n        this._shadowOffsetY = value;\n        this._markAsDirty();\n    }\n\n    private _shadowBlur = 0;\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\n    public get shadowBlur() {\n        return this._shadowBlur;\n    }\n\n    public set shadowBlur(value: number) {\n        if (this._shadowBlur === value) {\n            return;\n        }\n\n        this._shadowBlur = value;\n        this._markAsDirty();\n    }\n\n    private _shadowColor = 'black';\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\n    public get shadowColor() {\n        return this._shadowColor;\n    }\n\n    public set shadowColor(value: string) {\n        if (this._shadowColor === value) {\n            return;\n        }\n\n        this._shadowColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the cursor to use when the control is hovered */\n    public hoverCursor = \"\";\n\n    /** @hidden */\n    protected _linkOffsetX = new ValueAndUnit(0);\n    /** @hidden */\n    protected _linkOffsetY = new ValueAndUnit(0);\n\n    // Properties\n\n    /** Gets the control type name */\n    public get typeName(): string {\n        return this._getTypeName();\n    }\n\n    /**\n     * Get the current class name of the control.\n     * @returns current class name\n     */\n    public getClassName(): string {\n        return this._getTypeName();\n    }\n\n    /**\n    * An event triggered when pointer wheel is scrolled\n    */\n    public onWheelObservable = new Observable<Vector2>();\n    /**\n    * An event triggered when the pointer move over the control.\n    */\n    public onPointerMoveObservable = new Observable<Vector2>();\n\n    /**\n    * An event triggered when the pointer move out of the control.\n    */\n    public onPointerOutObservable = new Observable<Control>();\n\n    /**\n    * An event triggered when the pointer taps the control\n    */\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\n\n    /**\n    * An event triggered when pointer up\n    */\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\n\n    /**\n    * An event triggered when a control is clicked on\n    */\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\n\n    /**\n    * An event triggered when pointer enters the control\n    */\n    public onPointerEnterObservable = new Observable<Control>();\n\n    /**\n    * An event triggered when the control is marked as dirty\n    */\n    public onDirtyObservable = new Observable<Control>();\n\n    /**\n     * An event triggered before drawing the control\n     */\n    public onBeforeDrawObservable = new Observable<Control>();\n\n    /**\n     * An event triggered after the control was drawn\n     */\n    public onAfterDrawObservable = new Observable<Control>();\n\n    /**\n    * An event triggered when the control has been disposed\n    */\n   public onDisposeObservable = new Observable<Control>();\n\n    /**\n     * Get the hosting AdvancedDynamicTexture\n     */\n    public get host(): AdvancedDynamicTexture {\n        return this._host;\n    }\n\n    /** Gets or set information about font offsets (used to render and align text) */\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\n        return this._fontOffset;\n    }\n\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\n        this._fontOffset = offset;\n    }\n\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\n    public get alpha(): number {\n        return this._alpha;\n    }\n\n    public set alpha(value: number) {\n        if (this._alpha === value) {\n            return;\n        }\n        this._alphaSet = true;\n        this._alpha = value;\n        this._markAsDirty();\n    }\n\n    /**\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\n     */\n    public get isHighlighted(): boolean {\n        return this._isHighlighted;\n    }\n\n    public set isHighlighted(value: boolean) {\n        if (this._isHighlighted === value) {\n            return;\n        }\n\n        this._isHighlighted = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\n     * @see https://doc.babylonjs.com/how_to/gui#rotation-and-scaling\n    */\n    public get scaleX(): number {\n        return this._scaleX;\n    }\n\n    public set scaleX(value: number) {\n        if (this._scaleX === value) {\n            return;\n        }\n\n        this._scaleX = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\n     * @see https://doc.babylonjs.com/how_to/gui#rotation-and-scaling\n    */\n    public get scaleY(): number {\n        return this._scaleY;\n    }\n\n    public set scaleY(value: number) {\n        if (this._scaleY === value) {\n            return;\n        }\n\n        this._scaleY = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n\n    /** Gets or sets the rotation angle (0 by default)\n     * @see https://doc.babylonjs.com/how_to/gui#rotation-and-scaling\n    */\n    public get rotation(): number {\n        return this._rotation;\n    }\n\n    public set rotation(value: number) {\n        if (this._rotation === value) {\n            return;\n        }\n\n        this._rotation = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n\n    /** Gets or sets the transformation center on Y axis (0 by default)\n     * @see https://doc.babylonjs.com/how_to/gui#rotation-and-scaling\n    */\n    public get transformCenterY(): number {\n        return this._transformCenterY;\n    }\n\n    public set transformCenterY(value: number) {\n        if (this._transformCenterY === value) {\n            return;\n        }\n\n        this._transformCenterY = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n\n    /** Gets or sets the transformation center on X axis (0 by default)\n     * @see https://doc.babylonjs.com/how_to/gui#rotation-and-scaling\n    */\n    public get transformCenterX(): number {\n        return this._transformCenterX;\n    }\n\n    public set transformCenterX(value: number) {\n        if (this._transformCenterX === value) {\n            return;\n        }\n\n        this._transformCenterX = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n\n    /**\n     * Gets or sets the horizontal alignment\n     * @see https://doc.babylonjs.com/how_to/gui#alignments\n     */\n    public get horizontalAlignment(): number {\n        return this._horizontalAlignment;\n    }\n\n    public set horizontalAlignment(value: number) {\n        if (this._horizontalAlignment === value) {\n            return;\n        }\n\n        this._horizontalAlignment = value;\n        this._markAsDirty();\n    }\n\n    /**\n     * Gets or sets the vertical alignment\n     * @see https://doc.babylonjs.com/how_to/gui#alignments\n     */\n    public get verticalAlignment(): number {\n        return this._verticalAlignment;\n    }\n\n    public set verticalAlignment(value: number) {\n        if (this._verticalAlignment === value) {\n            return;\n        }\n\n        this._verticalAlignment = value;\n        this._markAsDirty();\n    }\n\n    /**\n     * Gets or sets a fixed ratio for this control.\n     * When different from 0, the ratio is used to compute the \"second\" dimension.\n     * The first dimension used in the computation is the last one set (by setting width / widthInPixels or height / heightInPixels), and the\n     * second dimension is computed as first dimension * fixedRatio\n     */\n    public fixedRatio = 0;\n\n    private _fixedRatioMasterIsWidth = true;\n\n    /**\n     * Gets or sets control width\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        this._fixedRatioMasterIsWidth = true;\n\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets the control width in pixel\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get widthInPixels(): number {\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set widthInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this._fixedRatioMasterIsWidth = true;\n        this.width = value + \"px\";\n    }\n\n    /**\n     * Gets or sets control height\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get height(): string | number {\n        return this._height.toString(this._host);\n    }\n\n    public set height(value: string | number) {\n        this._fixedRatioMasterIsWidth = false;\n\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._height.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets control height in pixel\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get heightInPixels(): number {\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n\n    public set heightInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this._fixedRatioMasterIsWidth = false;\n        this.height = value + \"px\";\n    }\n\n    /** Gets or set font family */\n    public get fontFamily(): string {\n        if (!this._fontSet) {\n            return \"\";\n        }\n        return this._fontFamily;\n    }\n\n    public set fontFamily(value: string) {\n        if (this._fontFamily === value) {\n            return;\n        }\n\n        this._fontFamily = value;\n        this._resetFontCache();\n    }\n\n    /** Gets or sets font style */\n    public get fontStyle(): string {\n        return this._fontStyle;\n    }\n\n    public set fontStyle(value: string) {\n        if (this._fontStyle === value) {\n            return;\n        }\n\n        this._fontStyle = value;\n        this._resetFontCache();\n    }\n\n    /** Gets or sets font weight */\n    public get fontWeight(): string {\n        return this._fontWeight;\n    }\n\n    public set fontWeight(value: string) {\n        if (this._fontWeight === value) {\n            return;\n        }\n\n        this._fontWeight = value;\n        this._resetFontCache();\n    }\n\n    /**\n     * Gets or sets style\n     * @see https://doc.babylonjs.com/how_to/gui#styles\n     */\n    public get style(): Nullable<Style> {\n        return this._style;\n    }\n\n    public set style(value: Nullable<Style>) {\n        if (this._style) {\n            this._style.onChangedObservable.remove(this._styleObserver);\n            this._styleObserver = null;\n        }\n\n        this._style = value;\n\n        if (this._style) {\n            this._styleObserver = this._style.onChangedObservable.add(() => {\n                this._markAsDirty();\n                this._resetFontCache();\n            });\n        }\n\n        this._markAsDirty();\n        this._resetFontCache();\n    }\n\n    /** @hidden */\n    public get _isFontSizeInPercentage(): boolean {\n        return this._fontSize.isPercentage;\n    }\n\n    /** Gets or sets font size in pixels */\n    public get fontSizeInPixels(): number {\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\n\n        if (fontSizeToUse.isPixel) {\n            return fontSizeToUse.getValue(this._host);\n        }\n\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\n    }\n\n    public set fontSizeInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.fontSize = value + \"px\";\n    }\n\n    /** Gets or sets font size */\n    public get fontSize(): string | number {\n        return this._fontSize.toString(this._host);\n    }\n\n    public set fontSize(value: string | number) {\n        if (this._fontSize.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._fontSize.fromString(value)) {\n            this._markAsDirty();\n            this._resetFontCache();\n        }\n    }\n\n    /** Gets or sets foreground color */\n    public get color(): string {\n        return this._color;\n    }\n\n    public set color(value: string) {\n        if (this._color === value) {\n            return;\n        }\n\n        this._color = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets z index which is used to reorder controls on the z axis */\n    public get zIndex(): number {\n        return this._zIndex;\n    }\n\n    public set zIndex(value: number) {\n        if (this.zIndex === value) {\n            return;\n        }\n\n        this._zIndex = value;\n\n        if (this.parent) {\n            this.parent._reOrderControl(this);\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can be rendered */\n    public get notRenderable(): boolean {\n        return this._doNotRender;\n    }\n\n    public set notRenderable(value: boolean) {\n        if (this._doNotRender === value) {\n            return;\n        }\n\n        this._doNotRender = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets a boolean indicating if the control is visible */\n    public get isVisible(): boolean {\n        return this._isVisible;\n    }\n\n    public set isVisible(value: boolean) {\n        if (this._isVisible === value) {\n            return;\n        }\n\n        this._isVisible = value;\n        this._markAsDirty(true);\n    }\n\n    /** Gets a boolean indicating that the control needs to update its rendering */\n    public get isDirty(): boolean {\n        return this._isDirty;\n    }\n\n    /**\n     * Gets the current linked mesh (or null if none)\n     */\n    public get linkedMesh(): Nullable<TransformNode> {\n        return this._linkedMesh;\n    }\n\n    /**\n     * Gets or sets a value indicating the padding to use on the left of the control\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingLeft(): string | number {\n        return this._paddingLeft.toString(this._host);\n    }\n\n    public set paddingLeft(value: string | number) {\n        if (this._paddingLeft.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the left of the control\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingLeftInPixels(): number {\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set paddingLeftInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingLeft = value + \"px\";\n    }\n\n    /**\n     * Gets or sets a value indicating the padding to use on the right of the control\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingRight(): string | number {\n        return this._paddingRight.toString(this._host);\n    }\n\n    public set paddingRight(value: string | number) {\n        if (this._paddingRight.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the right of the control\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingRightInPixels(): number {\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set paddingRightInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingRight = value + \"px\";\n    }\n\n    /**\n     * Gets or sets a value indicating the padding to use on the top of the control\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingTop(): string | number {\n        return this._paddingTop.toString(this._host);\n    }\n\n    public set paddingTop(value: string | number) {\n        if (this._paddingTop.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the top of the control\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingTopInPixels(): number {\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n\n    public set paddingTopInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingTop = value + \"px\";\n    }\n\n    /**\n     * Gets or sets a value indicating the padding to use on the bottom of the control\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingBottom(): string | number {\n        return this._paddingBottom.toString(this._host);\n    }\n\n    public set paddingBottom(value: string | number) {\n        if (this._paddingBottom.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the bottom of the control\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get paddingBottomInPixels(): number {\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n\n    public set paddingBottomInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingBottom = value + \"px\";\n    }\n\n    /**\n     * Gets or sets a value indicating the left coordinate of the control\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get left(): string | number {\n        return this._left.toString(this._host);\n    }\n\n    public set left(value: string | number) {\n        if (this._left.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the left coordinate in pixels of the control\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get leftInPixels(): number {\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set leftInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.left = value + \"px\";\n    }\n\n    /**\n     * Gets or sets a value indicating the top coordinate of the control\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get top(): string | number {\n        return this._top.toString(this._host);\n    }\n\n    public set top(value: string | number) {\n        if (this._top.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the top coordinate in pixels of the control\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get topInPixels(): number {\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n\n    public set topInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.top = value + \"px\";\n    }\n\n    /**\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\n     * @see https://doc.babylonjs.com/how_to/gui#tracking-positions\n     */\n    public get linkOffsetX(): string | number {\n        return this._linkOffsetX.toString(this._host);\n    }\n\n    public set linkOffsetX(value: string | number) {\n        if (this._linkOffsetX.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the offset in pixels on X axis to the linked mesh\n     * @see https://doc.babylonjs.com/how_to/gui#tracking-positions\n     */\n    public get linkOffsetXInPixels(): number {\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set linkOffsetXInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.linkOffsetX = value + \"px\";\n    }\n\n    /**\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\n     * @see https://doc.babylonjs.com/how_to/gui#tracking-positions\n     */\n    public get linkOffsetY(): string | number {\n        return this._linkOffsetY.toString(this._host);\n    }\n\n    public set linkOffsetY(value: string | number) {\n        if (this._linkOffsetY.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets a value indicating the offset in pixels on Y axis to the linked mesh\n     * @see https://doc.babylonjs.com/how_to/gui#tracking-positions\n     */\n    public get linkOffsetYInPixels(): number {\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n\n    public set linkOffsetYInPixels(value: number) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.linkOffsetY = value + \"px\";\n    }\n\n    /** Gets the center coordinate on X axis */\n    public get centerX(): number {\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\n    }\n\n    /** Gets the center coordinate on Y axis */\n    public get centerY(): number {\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\n    }\n\n    /** Gets or sets if control is Enabled*/\n    public get isEnabled(): boolean {\n        return this._isEnabled;\n    }\n\n    public set isEnabled(value: boolean) {\n        if (this._isEnabled === value) {\n            return;\n        }\n\n        this._isEnabled = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets background color of control if it's disabled*/\n    public get disabledColor(): string {\n        return this._disabledColor;\n    }\n\n    public set disabledColor(value: string) {\n        if (this._disabledColor === value) {\n            return;\n        }\n\n        this._disabledColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets front color of control if it's disabled*/\n    public get disabledColorItem(): string {\n        return this._disabledColorItem;\n    }\n\n    public set disabledColorItem(value: string) {\n        if (this._disabledColorItem === value) {\n            return;\n        }\n\n        this._disabledColorItem = value;\n        this._markAsDirty();\n    }\n    // Functions\n\n    /**\n     * Creates a new control\n     * @param name defines the name of the control\n     */\n    constructor(\n        /** defines the name of the control */\n        public name?: string) {\n    }\n\n    /** @hidden */\n    protected _getTypeName(): string {\n        return \"Control\";\n    }\n\n    /**\n     * Gets the first ascendant in the hierarchy of the given type\n     * @param className defines the required type\n     * @returns the ascendant or null if not found\n     */\n    public getAscendantOfClass(className: string): Nullable<Control> {\n        if (!this.parent) {\n            return null;\n        }\n\n        if (this.parent.getClassName() === className) {\n            return this.parent;\n        }\n\n        return this.parent.getAscendantOfClass(className);\n    }\n\n    /** @hidden */\n    public _resetFontCache(): void {\n        this._fontSet = true;\n        this._markAsDirty();\n    }\n\n    /**\n     * Determines if a container is an ascendant of the current control\n     * @param container defines the container to look for\n     * @returns true if the container is one of the ascendant of the control\n     */\n    public isAscendant(container: Control): boolean {\n        if (!this.parent) {\n            return false;\n        }\n\n        if (this.parent === container) {\n            return true;\n        }\n\n        return this.parent.isAscendant(container);\n    }\n\n    /**\n     * Gets coordinates in local control space\n     * @param globalCoordinates defines the coordinates to transform\n     * @returns the new coordinates in local space\n     */\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\n        var result = Vector2.Zero();\n\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\n\n        return result;\n    }\n\n    /**\n     * Gets coordinates in local control space\n     * @param globalCoordinates defines the coordinates to transform\n     * @param result defines the target vector2 where to store the result\n     * @returns the current control\n     */\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\n        result.x = globalCoordinates.x - this._currentMeasure.left;\n        result.y = globalCoordinates.y - this._currentMeasure.top;\n        return this;\n    }\n\n    /**\n     * Gets coordinates in parent local control space\n     * @param globalCoordinates defines the coordinates to transform\n     * @returns the new coordinates in parent local space\n     */\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\n        var result = Vector2.Zero();\n\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\n\n        return result;\n    }\n\n    /**\n     * Move the current control to a vector3 position projected onto the screen.\n     * @param position defines the target position\n     * @param scene defines the hosting scene\n     */\n    public moveToVector3(position: Vector3, scene: Scene): void {\n        if (!this._host || this.parent !== this._host._rootContainer) {\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\n            return;\n        }\n\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n\n        var globalViewport = this._host._getGlobalViewport(scene);\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\n\n        this._moveToProjectedPosition(projectedPosition);\n\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\n            this.notRenderable = true;\n            return;\n        }\n        this.notRenderable = false;\n    }\n\n    /**\n     * Will store all controls that have this control as ascendant in a given array\n     * @param results defines the array where to store the descendants\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n     */\n    public getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\n        // Do nothing by default\n    }\n\n    /**\n     * Will return all controls that have this control as ascendant\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n     * @return all child controls\n     */\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\n        var results = new Array<Control>();\n\n        this.getDescendantsToRef(results, directDescendantsOnly, predicate);\n\n        return results;\n    }\n\n    /**\n     * Link current control with a target mesh\n     * @param mesh defines the mesh to link with\n     * @see https://doc.babylonjs.com/how_to/gui#tracking-positions\n     */\n    public linkWithMesh(mesh: Nullable<TransformNode>): void {\n        if (!this._host || this.parent && this.parent !== this._host._rootContainer) {\n            if (mesh) {\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\n            }\n            return;\n        }\n\n        var index = this._host._linkedControls.indexOf(this);\n        if (index !== -1) {\n            this._linkedMesh = mesh;\n            if (!mesh) {\n                this._host._linkedControls.splice(index, 1);\n            }\n            return;\n        } else if (!mesh) {\n            return;\n        }\n\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n        this._linkedMesh = mesh;\n        this._host._linkedControls.push(this);\n    }\n\n    /** @hidden */\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\n        let oldLeft = this._left.getValue(this._host);\n        let oldTop = this._top.getValue(this._host);\n\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\n\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\n                newLeft = oldLeft;\n            }\n\n            if (Math.abs(newTop - oldTop) < 0.5) {\n                newTop = oldTop;\n            }\n        }\n\n        this.left = newLeft + \"px\";\n        this.top = newTop + \"px\";\n\n        this._left.ignoreAdaptiveScaling = true;\n        this._top.ignoreAdaptiveScaling = true;\n        this._markAsDirty();\n    }\n\n    /** @hidden */\n    public _offsetLeft(offset: number) {\n        this._isDirty = true;\n        this._currentMeasure.left += offset;\n    }\n\n    /** @hidden */\n    public _offsetTop(offset: number) {\n        this._isDirty = true;\n        this._currentMeasure.top += offset;\n    }\n\n    /** @hidden */\n    public _markMatrixAsDirty(): void {\n        this._isMatrixDirty = true;\n        this._flagDescendantsAsMatrixDirty();\n    }\n\n    /** @hidden */\n    public _flagDescendantsAsMatrixDirty(): void {\n        // No child\n    }\n\n    /** @hidden */\n    public _intersectsRect(rect: Measure) {\n        // Rotate the control's current measure into local space and check if it intersects the passed in rectangle\n        this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);\n        if (this._tmpMeasureA.left >= rect.left + rect.width) {\n            return false;\n        }\n\n        if (this._tmpMeasureA.top >= rect.top + rect.height) {\n            return false;\n        }\n\n        if (this._tmpMeasureA.left + this._tmpMeasureA.width <= rect.left) {\n            return false;\n        }\n\n        if (this._tmpMeasureA.top + this._tmpMeasureA.height <= rect.top) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /** @hidden */\n    protected invalidateRect() {\n        this._transform();\n        if (this.host && this.host.useInvalidateRectOptimization) {\n            // Rotate by transform to get the measure transformed to global space\n            this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);\n            // get the boudning box of the current measure and last frames measure in global space and invalidate it\n            // the previous measure is used to properly clear a control that is scaled down\n            Measure.CombineToRef(this._tmpMeasureA, this._prevCurrentMeasureTransformedIntoGlobalSpace, this._tmpMeasureA);\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                // Expand rect based on shadows\n                var shadowOffsetX = this.shadowOffsetX;\n                var shadowOffsetY = this.shadowOffsetY;\n                var shadowBlur = this.shadowBlur;\n\n                var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\n                var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\n                var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\n                var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\n\n                this.host.invalidateRect(\n                    Math.floor(this._tmpMeasureA.left + leftShadowOffset),\n                    Math.floor(this._tmpMeasureA.top + topShadowOffset),\n                    Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width + rightShadowOffset),\n                    Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height + bottomShadowOffset),\n                );\n            } else {\n                this.host.invalidateRect(\n                    Math.floor(this._tmpMeasureA.left),\n                    Math.floor(this._tmpMeasureA.top),\n                    Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width),\n                    Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height),\n                );\n            }\n\n        }\n    }\n\n    /** @hidden */\n    public _markAsDirty(force = false): void {\n        if (!this._isVisible && !force) {\n            return;\n        }\n\n        this._isDirty = true;\n\n        // Redraw only this rectangle\n        if (this._host) {\n            this._host.markAsDirty();\n        }\n    }\n\n    /** @hidden */\n    public _markAllAsDirty(): void {\n        this._markAsDirty();\n\n        if (this._font) {\n            this._prepareFont();\n        }\n    }\n\n    /** @hidden */\n    public _link(host: AdvancedDynamicTexture): void {\n        this._host = host;\n        if (this._host) {\n            this.uniqueId = this._host.getScene()!.getUniqueId();\n        }\n    }\n\n    /** @hidden */\n    protected _transform(context?: CanvasRenderingContext2D): void {\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\n            return;\n        }\n\n        // postTranslate\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\n        if (context) {\n            context.translate(offsetX, offsetY);\n\n            // rotate\n            context.rotate(this._rotation);\n\n            // scale\n            context.scale(this._scaleX, this._scaleY);\n\n            // preTranslate\n            context.translate(-offsetX, -offsetY);\n        }\n        // Need to update matrices?\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\n            this._cachedOffsetX = offsetX;\n            this._cachedOffsetY = offsetY;\n            this._isMatrixDirty = false;\n            this._flagDescendantsAsMatrixDirty();\n\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\n\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\n        }\n    }\n\n    /** @hidden */\n    public _renderHighlight(context: CanvasRenderingContext2D): void {\n        if (!this.isHighlighted) {\n            return;\n        }\n\n        context.save();\n        context.strokeStyle = \"#4affff\";\n        context.lineWidth = 2;\n\n        this._renderHighlightSpecific(context);\n        context.restore();\n    }\n\n    /** @hidden */\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n    }\n\n    /** @hidden */\n    protected _applyStates(context: CanvasRenderingContext2D): void {\n        if (this._isFontSizeInPercentage) {\n            this._fontSet = true;\n        }\n\n        if (this._fontSet) {\n            this._prepareFont();\n            this._fontSet = false;\n        }\n\n        if (this._font) {\n            context.font = this._font;\n        }\n\n        if (this._color) {\n            context.fillStyle = this._color;\n        }\n\n        if (Control.AllowAlphaInheritance) {\n            context.globalAlpha *= this._alpha;\n        } else if (this._alphaSet) {\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\n        }\n    }\n\n    /** @hidden */\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\n            return false;\n        }\n\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\n            this.host._numLayoutCalls++;\n\n            this._currentMeasure.addAndTransformToRef(this._transformMatrix,\n                -this.paddingLeftInPixels | 0,\n                -this.paddingTopInPixels | 0,\n                this.paddingRightInPixels | 0,\n                this.paddingBottomInPixels | 0,\n                this._prevCurrentMeasureTransformedIntoGlobalSpace);\n\n            context.save();\n\n            this._applyStates(context);\n\n            let rebuildCount = 0;\n            do {\n                this._rebuildLayout = false;\n                this._processMeasures(parentMeasure, context);\n                rebuildCount++;\n            }\n            while (this._rebuildLayout && rebuildCount < 3);\n\n            if (rebuildCount >= 3) {\n                Logger.Error(`Layout cycle detected in GUI (Control name=${this.name}, uniqueId=${this.uniqueId})`);\n            }\n\n            context.restore();\n            this.invalidateRect();\n            this._evaluateClippingState(parentMeasure);\n        }\n\n        this._wasDirty = this._isDirty;\n        this._isDirty = false;\n\n        return true;\n    }\n\n    /** @hidden */\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        this._currentMeasure.copyFrom(parentMeasure);\n\n        // Let children take some pre-measurement actions\n        this._preMeasure(parentMeasure, context);\n\n        this._measure();\n        this._computeAlignment(parentMeasure, context);\n\n        // Convert to int values\n        this._currentMeasure.left = this._currentMeasure.left | 0;\n        this._currentMeasure.top = this._currentMeasure.top | 0;\n        this._currentMeasure.width = this._currentMeasure.width | 0;\n        this._currentMeasure.height = this._currentMeasure.height | 0;\n\n        // Let children add more features\n        this._additionalProcessing(parentMeasure, context);\n\n        this._cachedParentMeasure.copyFrom(parentMeasure);\n\n        if (this.onDirtyObservable.hasObservers()) {\n            this.onDirtyObservable.notifyObservers(this);\n        }\n    }\n\n    protected _evaluateClippingState(parentMeasure: Measure) {\n        if (this.parent && this.parent.clipChildren) {\n            // Early clip\n            if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\n                this._isClipped = true;\n                return;\n            }\n\n            if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\n                this._isClipped = true;\n                return;\n            }\n\n            if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\n                this._isClipped = true;\n                return;\n            }\n\n            if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\n                this._isClipped = true;\n                return;\n            }\n        }\n\n        this._isClipped = false;\n    }\n\n    /** @hidden */\n    public _measure(): void {\n        // Width / Height\n        if (this._width.isPixel) {\n            this._currentMeasure.width = this._width.getValue(this._host);\n        } else {\n            this._currentMeasure.width *= this._width.getValue(this._host);\n        }\n\n        if (this._height.isPixel) {\n            this._currentMeasure.height = this._height.getValue(this._host);\n        } else {\n            this._currentMeasure.height *= this._height.getValue(this._host);\n        }\n\n        if (this.fixedRatio !== 0) {\n            if (this._fixedRatioMasterIsWidth) {\n                this._currentMeasure.height = this._currentMeasure.width * this.fixedRatio;\n            } else {\n                this._currentMeasure.width = this._currentMeasure.height * this.fixedRatio;\n            }\n        }\n    }\n\n    /** @hidden */\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        var width = this._currentMeasure.width;\n        var height = this._currentMeasure.height;\n\n        var parentWidth = parentMeasure.width;\n        var parentHeight = parentMeasure.height;\n\n        // Left / top\n        var x = 0;\n        var y = 0;\n\n        switch (this.horizontalAlignment) {\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\n                x = 0;\n                break;\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\n                x = parentWidth - width;\n                break;\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\n                x = (parentWidth - width) / 2;\n                break;\n        }\n\n        switch (this.verticalAlignment) {\n            case Control.VERTICAL_ALIGNMENT_TOP:\n                y = 0;\n                break;\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\n                y = parentHeight - height;\n                break;\n            case Control.VERTICAL_ALIGNMENT_CENTER:\n                y = (parentHeight - height) / 2;\n                break;\n        }\n\n        if (this._paddingLeft.isPixel) {\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\n        } else {\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\n        }\n\n        if (this._paddingRight.isPixel) {\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\n        } else {\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\n        }\n\n        if (this._paddingTop.isPixel) {\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\n        } else {\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\n        }\n\n        if (this._paddingBottom.isPixel) {\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\n        } else {\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\n        }\n\n        if (this._left.isPixel) {\n            this._currentMeasure.left += this._left.getValue(this._host);\n        } else {\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\n        }\n\n        if (this._top.isPixel) {\n            this._currentMeasure.top += this._top.getValue(this._host);\n        } else {\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\n        }\n\n        this._currentMeasure.left += x;\n        this._currentMeasure.top += y;\n    }\n\n    /** @hidden */\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        // Do nothing\n    }\n\n    /** @hidden */\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        // Do nothing\n    }\n\n    /** @hidden */\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\n        // DO nothing\n    }\n\n    private static _ClipMeasure = new Measure(0, 0, 0, 0);\n    private _tmpMeasureA = new Measure(0, 0, 0, 0);\n    private _clip(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>) {\n        context.beginPath();\n        Control._ClipMeasure.copyFrom(this._currentMeasure);\n        if (invalidatedRectangle) {\n            // Rotate the invalidated rect into the control's space\n            invalidatedRectangle.transformToRef(this._invertTransformMatrix, this._tmpMeasureA);\n\n            // Get the intersection of the rect in context space and the current context\n            var intersection = new Measure(0, 0, 0, 0);\n            intersection.left = Math.max(this._tmpMeasureA.left, this._currentMeasure.left);\n            intersection.top = Math.max(this._tmpMeasureA.top, this._currentMeasure.top);\n            intersection.width = Math.min(this._tmpMeasureA.left + this._tmpMeasureA.width, this._currentMeasure.left + this._currentMeasure.width) - intersection.left;\n            intersection.height = Math.min(this._tmpMeasureA.top + this._tmpMeasureA.height, this._currentMeasure.top + this._currentMeasure.height) - intersection.top;\n            Control._ClipMeasure.copyFrom(intersection);\n        }\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            var shadowOffsetX = this.shadowOffsetX;\n            var shadowOffsetY = this.shadowOffsetY;\n            var shadowBlur = this.shadowBlur;\n\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\n\n            context.rect(\n                Control._ClipMeasure.left + leftShadowOffset,\n                Control._ClipMeasure.top + topShadowOffset,\n                Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset,\n                Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset\n            );\n        } else {\n            context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);\n        }\n\n        context.clip();\n    }\n\n    /** @hidden */\n    public _render(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): boolean {\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\n            this._isDirty = false;\n            return false;\n        }\n\n        this.host._numRenderCalls++;\n\n        context.save();\n\n        this._applyStates(context);\n\n        // Transform\n        this._transform(context);\n\n        // Clip\n        if (this.clipContent) {\n            this._clip(context, invalidatedRectangle);\n        }\n\n        if (this.onBeforeDrawObservable.hasObservers()) {\n            this.onBeforeDrawObservable.notifyObservers(this);\n        }\n\n        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\n            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\n        } else {\n            this._draw(context, invalidatedRectangle);\n        }\n\n        if (this.useBitmapCache && this._wasDirty) {\n            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n\n        this._renderHighlight(context);\n\n        if (this.onAfterDrawObservable.hasObservers()) {\n            this.onAfterDrawObservable.notifyObservers(this);\n        }\n\n        context.restore();\n\n        return true;\n    }\n\n    /** @hidden */\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\n        // Do nothing\n    }\n\n    /**\n     * Tests if a given coordinates belong to the current control\n     * @param x defines x coordinate to test\n     * @param y defines y coordinate to test\n     * @returns true if the coordinates are inside the control\n     */\n    public contains(x: number, y: number): boolean {\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\n\n        x = this._transformedPosition.x;\n        y = this._transformedPosition.y;\n\n        // Check\n        if (x < this._currentMeasure.left) {\n            return false;\n        }\n\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\n            return false;\n        }\n\n        if (y < this._currentMeasure.top) {\n            return false;\n        }\n\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\n            return false;\n        }\n\n        if (this.isPointerBlocker) {\n            this._host._shouldBlockPointer = true;\n        }\n        return true;\n    }\n\n    /** @hidden */\n    public _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\n        if (!this._isEnabled) {\n            return false;\n        }\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\n            return false;\n        }\n\n        if (!this.contains(x, y)) {\n            return false;\n        }\n\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\n\n        return true;\n    }\n\n    /** @hidden */\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this, pi);\n\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates, pointerId, pi); }\n    }\n\n    /** @hidden */\n    public _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\n        if (!this._isEnabled) {\n            return false;\n        }\n        if (this._enterCount > 0) {\n            return false;\n        }\n\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\n            this._enterCount = 0;\n        }\n        this._enterCount++;\n\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this, pi);\n\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target, pi); }\n\n        return true;\n    }\n\n    /** @hidden */\n    public _onPointerOut(target: Control, pi: Nullable<PointerInfoBase>, force = false): void {\n        if (!force && (!this._isEnabled || target === this)) {\n            return;\n        }\n        this._enterCount = 0;\n\n        var canNotify: boolean = true;\n\n        if (!target.isAscendant(this)) {\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this, pi);\n        }\n\n        if (canNotify && this.parent != null) {\n            this.parent._onPointerOut(target, pi, force);\n        }\n    }\n\n    /** @hidden */\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\n        // Prevent pointerout to lose control context.\n        // Event redundancy is checked inside the function.\n        this._onPointerEnter(this, pi);\n\n        if (this._downCount !== 0) {\n            return false;\n        }\n\n        this._downCount++;\n\n        this._downPointerIds[pointerId] = true;\n\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\n\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex, pi); }\n\n        return true;\n    }\n\n    /** @hidden */\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi?: PointerInfoBase): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._downCount = 0;\n\n        delete this._downPointerIds[pointerId];\n\n        var canNotifyClick: boolean = notifyClick;\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\n        }\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\n\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick, pi); }\n    }\n\n    /** @hidden */\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\n        if (pointerId !== null) {\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\n        } else {\n            for (var key in this._downPointerIds) {\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\n            }\n        }\n    }\n\n    /** @hidden */\n    public _onWheelScroll(deltaX?: number, deltaY?: number): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        var canNotify: boolean = this.onWheelObservable.notifyObservers(new Vector2(deltaX, deltaY));\n\n        if (canNotify && this.parent != null) { this.parent._onWheelScroll(deltaX, deltaY); }\n    }\n\n    /** @hidden */\n    public _onCanvasBlur(): void {}\n\n    /** @hidden */\n    public _processObservables(type: number, x: number, y: number, pi: PointerInfoBase, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._dummyVector2.copyFromFloats(x, y);\n        if (type === PointerEventTypes.POINTERMOVE) {\n            this._onPointerMove(this, this._dummyVector2, pointerId, pi);\n\n            var previousControlOver = this._host._lastControlOver[pointerId];\n            if (previousControlOver && previousControlOver !== this) {\n                previousControlOver._onPointerOut(this, pi);\n            }\n\n            if (previousControlOver !== this) {\n                this._onPointerEnter(this, pi);\n            }\n\n            this._host._lastControlOver[pointerId] = this;\n            return true;\n        }\n\n        if (type === PointerEventTypes.POINTERDOWN) {\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex, pi);\n            this._host._registerLastControlDown(this, pointerId);\n            this._host._lastPickedControl = this;\n            return true;\n        }\n\n        if (type === PointerEventTypes.POINTERUP) {\n            if (this._host._lastControlDown[pointerId]) {\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true, pi);\n            }\n            delete this._host._lastControlDown[pointerId];\n            return true;\n        }\n\n        if (type === PointerEventTypes.POINTERWHEEL) {\n            if (this._host._lastControlOver[pointerId]) {\n                this._host._lastControlOver[pointerId]._onWheelScroll(deltaX, deltaY);\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private _prepareFont() {\n        if (!this._font && !this._fontSet) {\n            return;\n        }\n\n        if (this._style) {\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\n        } else {\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\n        }\n\n        this._fontOffset = Control._GetFontOffset(this._font);\n    }\n\n    /** Releases associated resources */\n    public dispose() {\n        this.onDirtyObservable.clear();\n        this.onBeforeDrawObservable.clear();\n        this.onAfterDrawObservable.clear();\n        this.onPointerDownObservable.clear();\n        this.onPointerEnterObservable.clear();\n        this.onPointerMoveObservable.clear();\n        this.onPointerOutObservable.clear();\n        this.onPointerUpObservable.clear();\n        this.onPointerClickObservable.clear();\n        this.onWheelObservable.clear();\n\n        if (this._styleObserver && this._style) {\n            this._style.onChangedObservable.remove(this._styleObserver);\n            this._styleObserver = null;\n        }\n\n        if (this.parent) {\n            this.parent.removeControl(this);\n            this.parent = null;\n        }\n\n        if (this._host) {\n            var index = this._host._linkedControls.indexOf(this);\n            if (index > -1) {\n                this.linkWithMesh(null);\n            }\n        }\n\n        // Callback\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n    }\n\n    // Statics\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\n\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\n\n    /** HORIZONTAL_ALIGNMENT_LEFT */\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\n    }\n\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\n    }\n\n    /** HORIZONTAL_ALIGNMENT_CENTER */\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\n    }\n\n    /** VERTICAL_ALIGNMENT_TOP */\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\n        return Control._VERTICAL_ALIGNMENT_TOP;\n    }\n\n    /** VERTICAL_ALIGNMENT_BOTTOM */\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\n    }\n\n    /** VERTICAL_ALIGNMENT_CENTER */\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\n        return Control._VERTICAL_ALIGNMENT_CENTER;\n    }\n\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\n\n    /** @hidden */\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\n\n        if (Control._FontHeightSizes[font]) {\n            return Control._FontHeightSizes[font];\n        }\n\n        var text = document.createElement(\"span\");\n        text.innerHTML = \"Hg\";\n        text.style.font = font;\n\n        var block = document.createElement(\"div\");\n        block.style.display = \"inline-block\";\n        block.style.width = \"1px\";\n        block.style.height = \"0px\";\n        block.style.verticalAlign = \"bottom\";\n\n        var div = document.createElement(\"div\");\n        div.style.whiteSpace = \"nowrap\";\n        div.appendChild(text);\n        div.appendChild(block);\n\n        document.body.appendChild(div);\n\n        var fontAscent = 0;\n        var fontHeight = 0;\n        try {\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\n            block.style.verticalAlign = \"baseline\";\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\n        } finally {\n            document.body.removeChild(div);\n        }\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\n        Control._FontHeightSizes[font] = result;\n\n        return result;\n    }\n\n    /**\n     * Creates a stack panel that can be used to render headers\n     * @param control defines the control to associate with the header\n     * @param text defines the text of the header\n     * @param size defines the size of the header\n     * @param options defines options used to configure the header\n     * @returns a new StackPanel\n     * @ignore\n     * @hidden\n     */\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\n\n    /** @hidden */\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\n        context.translate(x, y);\n        context.scale(width, height);\n\n        context.beginPath();\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\n        context.closePath();\n\n        context.scale(1 / width, 1 / height);\n        context.translate(-x, -y);\n    }\n}\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Control\"] = Control;", "import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Logger } from \"@babylonjs/core/Misc/logger\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { PointerInfoBase } from '@babylonjs/core/Events/pointerEvents';\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see https://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    public _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background = \"\";\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layout cycle errors should be displayed on the console\r\n     */\r\n    public logLayoutCycleErrors = false;\r\n\r\n    /**\r\n     * Gets or sets the number of layout cycles (a change involved by a control while evaluating the layout) allowed\r\n     */\r\n    public maxLayoutCycle = 3;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this.children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        let wasAdded = false;\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                wasAdded = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!wasAdded) {\r\n            this._children.push(control);\r\n        }\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        super._offsetLeft(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetLeft(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        super._offsetTop(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetTop(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            context.save();\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _beforeLayout() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            super._processMeasures(parentMeasure, context);\r\n            this._evaluateClippingState(parentMeasure);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\r\n            return false;\r\n        }\r\n\r\n        this.host._numLayoutCalls++;\r\n\r\n        if (this._isDirty) {\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._prevCurrentMeasureTransformedIntoGlobalSpace);\r\n        }\r\n\r\n        let rebuildCount = 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._beforeLayout();\r\n\r\n        do {\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n\r\n            if (!this._isClipped) {\r\n                for (var child of this._children) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    if (child._layout(this._measureForChildren, context)) {\r\n\r\n                        if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                            computedWidth = Math.max(computedWidth, child._currentMeasure.width + child.paddingLeftInPixels + child.paddingRightInPixels);\r\n                        }\r\n                        if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                            computedHeight = Math.max(computedHeight, child._currentMeasure.height + child.paddingTopInPixels + child.paddingBottomInPixels);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                    computedWidth += this.paddingLeftInPixels + this.paddingRightInPixels;\r\n                    if (this.width !== computedWidth + \"px\") {\r\n                        this.width = computedWidth + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                    computedHeight += this.paddingTopInPixels + this.paddingBottomInPixels;\r\n                    if (this.height !== computedHeight + \"px\") {\r\n                        this.height = computedHeight + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n\r\n                this._postMeasure();\r\n            }\r\n            rebuildCount++;\r\n        }\r\n        while (this._rebuildLayout && rebuildCount < this.maxLayoutCycle);\r\n\r\n        if (rebuildCount >= 3 && this.logLayoutCycleErrors) {\r\n            Logger.Error(`Layout cycle detected in GUI (Container name=${this.name}, uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        if (this._isDirty) {\r\n            this.invalidateRect();\r\n\r\n            this._isDirty = false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _postMeasure() {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Measure): void {\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        for (var child of this._children) {\r\n            // Only redraw parts of the screen that are invalidated\r\n            if (invalidatedRectangle) {\r\n                if (!child._intersectsRect(invalidatedRectangle)) {\r\n                    continue;\r\n                }\r\n            }\r\n            child._render(context, invalidatedRectangle);\r\n        }\r\n    }\r\n\r\n    public getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var index = 0; index < this.children.length; index++) {\r\n            var item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item.getDescendantsToRef(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var index = this.children.length - 1; index >= 0; index--) {\r\n            this.children[index].dispose();\r\n        }\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Container\"] = Container;", "import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Rectangle\"] = Rectangle;", "import { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { _TypeStore } from \"@babylonjs/core/Misc/typeStore\";\r\nimport { Nullable } from \"@babylonjs/core/types\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing \u2026 when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    private _underline: boolean = false;\r\n    private _lineThrough: boolean = false;\r\n    /**\r\n     * An event triggered after the text is changed\r\n     */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * An event triggered after the text was broken up into lines\r\n     */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Function used to split a string into words. By default, a string is split at each space character found\r\n     */\r\n    public wordSplittingFunction: Nullable<(line: string) => string[]>;\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        if (this._resizeToFit === value) {\r\n            return;\r\n        }\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that text must have underline\r\n     */\r\n    public get underline(): boolean {\r\n        return this._underline;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that text must have underline\r\n     */\r\n    public set underline(value: boolean) {\r\n        if (this._underline === value) {\r\n            return;\r\n        }\r\n        this._underline = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that text must be crossed out\r\n     */\r\n    public get lineThrough(): boolean {\r\n        return this._lineThrough;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that text must be crossed out\r\n     */\r\n    public set lineThrough(value: boolean) {\r\n        if (this._lineThrough === value) {\r\n            return;\r\n        }\r\n        this._lineThrough = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\"\r\n    ) {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n\r\n        let maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (line.width > maxLineWidth) {\r\n                maxLineWidth = line.width;\r\n            }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            if (this._textWrapping === TextWrapping.Clip) {\r\n                let newWidth = (this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth) | 0;\r\n                if (newWidth !== this._width.internalValue) {\r\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n                    this._rebuildLayout = true;\r\n                }\r\n            }\r\n            let newHeight = (this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length) | 0;\r\n\r\n            if (this._lines.length > 0 && this._lineSpacing.internalValue !== 0) {\r\n                let lineSpacing = 0;\r\n                if (this._lineSpacing.isPixel) {\r\n                    lineSpacing = this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n\r\n                newHeight += (this._lines.length - 1) * lineSpacing;\r\n            }\r\n\r\n            if (newHeight !== this._height.internalValue) {\r\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n\r\n        if (this._underline) {\r\n            context.beginPath();\r\n            context.lineWidth = Math.round(this.fontSizeInPixels * 0.05);\r\n            context.moveTo(this._currentMeasure.left + x, y + 3);\r\n            context.lineTo(this._currentMeasure.left + x + textWidth, y + 3);\r\n            context.stroke();\r\n            context.closePath();\r\n        }\r\n\r\n        if (this._lineThrough) {\r\n            context.beginPath();\r\n            context.lineWidth = Math.round(this.fontSizeInPixels * 0.05);\r\n            context.moveTo(this._currentMeasure.left + x, y - this.fontSizeInPixels / 3);\r\n            context.lineTo(this._currentMeasure.left + x + textWidth, y - this.fontSizeInPixels / 3);\r\n            context.stroke();\r\n            context.closePath();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Render lines\r\n        this._renderLines(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n            context.lineJoin = 'miter';\r\n            context.miterLimit = 2;\r\n        }\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = \"\", context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = \"\", width: number, context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += \"\u2026\";\r\n        }\r\n        // unicode support. split('') does not work with unicode!\r\n        // make sure Array.from is available\r\n        const characters = Array.from && Array.from(line);\r\n        if (!characters) {\r\n            // no array.from, use the old method\r\n            while (line.length > 2 && lineWidth > width) {\r\n                line = line.slice(0, -2) + \"\u2026\";\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n        } else {\r\n            while (characters.length && lineWidth > width) {\r\n                characters.pop();\r\n                line = `${characters.join(\"\")}...`;\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = \"\", width: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = this.wordSplittingFunction ? this.wordSplittingFunction(line) : line.split(\" \");\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            } else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement(\"canvas\").getContext(\"2d\");\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n\r\n                let newHeight = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n\r\n                if (lines.length > 0 && this._lineSpacing.internalValue !== 0) {\r\n                    let lineSpacing = 0;\r\n                    if (this._lineSpacing.isPixel) {\r\n                        lineSpacing = this._lineSpacing.getValue(this._host);\r\n                    } else {\r\n                        lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                    }\r\n\r\n                    newHeight += (lines.length - 1) * lineSpacing;\r\n                }\r\n\r\n                return newHeight;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.TextBlock\"] = TextBlock;\r\n", "import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _workingCanvas: Nullable<HTMLCanvasElement> = null;\r\n\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n    private _svgAttributesComputationCompleted: boolean = false;\r\n    private _isSVG: boolean = false;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    private _populateNinePatchSlicesFromImage = false;\r\n    private _sliceLeft: number;\r\n    private _sliceRight: number;\r\n    private _sliceTop: number;\r\n    private _sliceBottom: number;\r\n\r\n    private _detectPointerOnOpaqueOnly: boolean;\r\n\r\n    private _imageDataCache: {\r\n                data: Uint8ClampedArray | null;\r\n                key: string;\r\n            } = { data: null, key: \"\" };\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Observable notified when _sourceLeft, _sourceTop, _sourceWidth and _sourceHeight are computed\r\n     */\r\n    public onSVGAttributesComputedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data\r\n     */\r\n    public get populateNinePatchSlicesFromImage(): boolean {\r\n        return this._populateNinePatchSlicesFromImage;\r\n    }\r\n\r\n    public set populateNinePatchSlicesFromImage(value: boolean) {\r\n        if (this._populateNinePatchSlicesFromImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._populateNinePatchSlicesFromImage = value;\r\n\r\n        if (this._populateNinePatchSlicesFromImage && this._loaded) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if pointers should only be validated on pixels with alpha > 0.\r\n     * Beware using this as this will comsume more memory as the image has to be stored twice\r\n     */\r\n    public get detectPointerOnOpaqueOnly(): boolean {\r\n        return this._detectPointerOnOpaqueOnly;\r\n    }\r\n\r\n    public set detectPointerOnOpaqueOnly(value: boolean) {\r\n        if (this._detectPointerOnOpaqueOnly === value) {\r\n            return;\r\n        }\r\n\r\n        this._detectPointerOnOpaqueOnly = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left value for slicing (9-patch)\r\n     */\r\n    public get sliceLeft(): number {\r\n        return this._sliceLeft;\r\n    }\r\n\r\n    public set sliceLeft(value: number) {\r\n        if (this._sliceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the right value for slicing (9-patch)\r\n     */\r\n    public get sliceRight(): number {\r\n        return this._sliceRight;\r\n    }\r\n\r\n    public set sliceRight(value: number) {\r\n        if (this._sliceRight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceRight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top value for slicing (9-patch)\r\n     */\r\n    public get sliceTop(): number {\r\n        return this._sliceTop;\r\n    }\r\n\r\n    public set sliceTop(value: number) {\r\n        if (this._sliceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the bottom value for slicing (9-patch)\r\n     */\r\n    public get sliceBottom(): number {\r\n        return this._sliceBottom;\r\n    }\r\n\r\n    public set sliceBottom(value: number) {\r\n        if (this._sliceBottom === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceBottom = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Indicates if the format of the image is SVG */\r\n    public get isSVG(): boolean {\r\n        return this._isSVG;\r\n    }\r\n\r\n    /** Gets the status of the SVG attributes computation (sourceLeft, sourceTop, sourceWidth, sourceHeight) */\r\n    public get svgAttributesComputationCompleted(): boolean {\r\n        return this._svgAttributesComputationCompleted;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see https://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rotate90(n: number, preserveProperties: boolean = false): Image {\r\n        let canvas = document.createElement('canvas');\r\n\r\n        const context = canvas.getContext('2d')!;\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        canvas.width = height;\r\n        canvas.height = width;\r\n\r\n        context.translate(canvas.width / 2, canvas.height / 2);\r\n        context.rotate(n * Math.PI / 2);\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height, -width / 2, -height / 2, width, height);\r\n\r\n        const dataUrl: string = canvas.toDataURL(\"image/jpg\");\r\n        const rotatedImage = new Image(this.name + \"rotated\", dataUrl);\r\n\r\n        if (preserveProperties) {\r\n            rotatedImage._stretch = this._stretch;\r\n            rotatedImage._autoScale = this._autoScale;\r\n            rotatedImage._cellId = this._cellId;\r\n            rotatedImage._cellWidth = n % 1 ? this._cellHeight : this._cellWidth;\r\n            rotatedImage._cellHeight = n % 1 ? this._cellWidth : this._cellHeight;\r\n        }\r\n\r\n        this._handleRotationForSVGImage(this, rotatedImage, n);\r\n\r\n        this._imageDataCache.data = null;\r\n\r\n        return rotatedImage;\r\n    }\r\n\r\n    private _handleRotationForSVGImage(srcImage: Image, dstImage: Image, n: number): void {\r\n        if (!srcImage._isSVG) {\r\n            return;\r\n        }\r\n\r\n        if (srcImage._svgAttributesComputationCompleted) {\r\n            this._rotate90SourceProperties(srcImage, dstImage, n);\r\n            this._markAsDirty();\r\n        } else {\r\n            srcImage.onSVGAttributesComputedObservable.addOnce(() => {\r\n                this._rotate90SourceProperties(srcImage, dstImage, n);\r\n                this._markAsDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    private _rotate90SourceProperties(srcImage: Image, dstImage: Image, n: number): void {\r\n        let srcLeft = srcImage.sourceLeft,\r\n            srcTop = srcImage.sourceTop,\r\n            srcWidth = srcImage.domImage.width,\r\n            srcHeight = srcImage.domImage.height;\r\n\r\n        let dstLeft = srcLeft,\r\n            dstTop = srcTop,\r\n            dstWidth = srcImage.sourceWidth,\r\n            dstHeight = srcImage.sourceHeight;\r\n\r\n        if (n != 0) {\r\n            let mult = n < 0 ? -1 : 1;\r\n            n = n % 4;\r\n            for (let i = 0; i < Math.abs(n); ++i) {\r\n                dstLeft = -(srcTop - srcHeight / 2) * mult + srcHeight / 2;\r\n                dstTop = (srcLeft - srcWidth / 2) * mult + srcWidth / 2;\r\n                [dstWidth, dstHeight] = [dstHeight, dstWidth];\r\n                if (n < 0) {\r\n                    dstTop -= dstHeight;\r\n                } else {\r\n                    dstLeft -= dstWidth;\r\n                }\r\n                srcLeft = dstLeft;\r\n                srcTop = dstTop;\r\n                [srcWidth, srcHeight] = [srcHeight, srcWidth];\r\n            }\r\n        }\r\n\r\n        dstImage.sourceLeft = dstLeft;\r\n        dstImage.sourceTop = dstTop;\r\n        dstImage.sourceWidth = dstWidth;\r\n        dstImage.sourceHeight = dstHeight;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n        this._imageDataCache.data = null;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageDataCache.data = null;\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _extractNinePatchSliceDataFromImage() {\r\n        if (!this._workingCanvas) {\r\n            this._workingCanvas = document.createElement('canvas');\r\n        }\r\n        const canvas = this._workingCanvas;\r\n        const context = canvas.getContext('2d')!;\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height);\r\n        const imageData = context.getImageData(0, 0, width, height);\r\n\r\n        // Left and right\r\n        this._sliceLeft = -1;\r\n        this._sliceRight = -1;\r\n        for (var x = 0; x < width; x++) {\r\n            const alpha = imageData.data[x * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceLeft === -1) {\r\n                this._sliceLeft = x;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceLeft > -1) {\r\n                this._sliceRight = x;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // top and bottom\r\n        this._sliceTop = -1;\r\n        this._sliceBottom = -1;\r\n        for (var y = 0; y < height; y++) {\r\n            const alpha = imageData.data[y * width * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceTop === -1) {\r\n                this._sliceTop = y;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceTop > -1) {\r\n                this._sliceBottom = y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n        this._imageDataCache.data = null;\r\n\r\n        if (value) {\r\n            value = this._svgCheck(value);\r\n        }\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks for svg document with icon id present\r\n     */\r\n    private _svgCheck(value: string): string {\r\n        if (window.SVGSVGElement && (value.search(/.svg#/gi) !== -1) && (value.indexOf(\"#\") === value.lastIndexOf(\"#\"))) {\r\n            this._isSVG = true;\r\n            var svgsrc = value.split('#')[0];\r\n            var elemid = value.split('#')[1];\r\n            // check if object alr exist in document\r\n            var svgExist = <HTMLObjectElement> document.body.querySelector('object[data=\"' + svgsrc + '\"]');\r\n            if (svgExist) {\r\n                var svgDoc = svgExist.contentDocument;\r\n                // get viewbox width and height, get svg document width and height in px\r\n                if (svgDoc && svgDoc.documentElement) {\r\n                    var vb = svgDoc.documentElement.getAttribute(\"viewBox\");\r\n                    var docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\r\n                    var docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\r\n                    var elem = <SVGGraphicsElement> <unknown> svgDoc.getElementById(elemid);\r\n                    if (elem && vb && docwidth && docheight) {\r\n                        this._getSVGAttribs(svgExist, elemid);\r\n                        return value;\r\n                    }\r\n                }\r\n\r\n                // wait for object to load\r\n                svgExist.addEventListener(\"load\", () => {\r\n                    this._getSVGAttribs(svgExist, elemid);\r\n                });\r\n            } else {\r\n                // create document object\r\n                var svgImage = document.createElement(\"object\");\r\n                svgImage.data = svgsrc;\r\n                svgImage.type = \"image/svg+xml\";\r\n                svgImage.width = \"0%\";\r\n                svgImage.height = \"0%\";\r\n                document.body.appendChild(svgImage);\r\n                // when the object has loaded, get the element attribs\r\n                svgImage.onload = () => {\r\n                    var svgobj = <HTMLObjectElement> document.body.querySelector('object[data=\"' + svgsrc + '\"]');\r\n                    if (svgobj) {\r\n                        this._getSVGAttribs(svgobj, elemid);\r\n                    }\r\n                };\r\n            }\r\n            return svgsrc;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets sourceLeft, sourceTop, sourceWidth, sourceHeight automatically\r\n\t * given external svg file and icon id\r\n     */\r\n    private _getSVGAttribs(svgsrc: HTMLObjectElement, elemid: string) {\r\n        var svgDoc = svgsrc.contentDocument;\r\n        // get viewbox width and height, get svg document width and height in px\r\n        if (svgDoc && svgDoc.documentElement) {\r\n            var vb = svgDoc.documentElement.getAttribute(\"viewBox\");\r\n            var docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\r\n            var docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\r\n            // get element bbox and matrix transform\r\n            var elem = svgDoc.getElementById(elemid) as Nullable<SVGGraphicsElement>;\r\n            if (vb && docwidth && docheight && elem) {\r\n                var vb_width = Number(vb.split(\" \")[2]);\r\n                var vb_height = Number(vb.split(\" \")[3]);\r\n                var elem_bbox = elem.getBBox();\r\n                var elem_matrix_a = 1;\r\n                var elem_matrix_d = 1;\r\n                var elem_matrix_e = 0;\r\n                var elem_matrix_f = 0;\r\n                if (elem.transform && elem.transform.baseVal.consolidate()) {\r\n                    elem_matrix_a = elem.transform.baseVal.consolidate().matrix.a;\r\n                    elem_matrix_d = elem.transform.baseVal.consolidate().matrix.d;\r\n                    elem_matrix_e = elem.transform.baseVal.consolidate().matrix.e;\r\n                    elem_matrix_f = elem.transform.baseVal.consolidate().matrix.f;\r\n                }\r\n\r\n                // compute source coordinates and dimensions\r\n                this.sourceLeft = ((elem_matrix_a * elem_bbox.x + elem_matrix_e) * docwidth) / vb_width;\r\n                this.sourceTop = ((elem_matrix_d * elem_bbox.y + elem_matrix_f) * docheight) / vb_height;\r\n                this.sourceWidth = (elem_bbox.width * elem_matrix_a) * (docwidth / vb_width);\r\n                this.sourceHeight = (elem_bbox.height * elem_matrix_d) * (docheight / vb_height);\r\n                this._svgAttributesComputationCompleted = true;\r\n                this.onSVGAttributesComputedObservable.notifyObservers(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see https://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see https://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see https://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._detectPointerOnOpaqueOnly || !this._workingCanvas) {\r\n            return true;\r\n        }\r\n\r\n        const width = this._currentMeasure.width | 0;\r\n        const height = this._currentMeasure.height | 0;\r\n        const key = width + \"_\" + height;\r\n\r\n        let imageData = this._imageDataCache.data;\r\n\r\n        if (!imageData || this._imageDataCache.key !== key) {\r\n            const canvas = this._workingCanvas;\r\n            const context = canvas.getContext(\"2d\")!;\r\n\r\n            this._imageDataCache.data = imageData = context.getImageData(0, 0, width, height).data;\r\n            this._imageDataCache.key = key;\r\n        }\r\n\r\n        x = (x - this._currentMeasure.left) | 0;\r\n        y = (y - this._currentMeasure.top) | 0;\r\n\r\n        const pickedPixel = imageData[(x + y * width) * 4 + 3];\r\n\r\n        return pickedPixel > 0;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    if (this._autoScale) {\r\n                        this.synchronizeSizeWithContent();\r\n                    }\r\n                    if (this.parent && this.parent.parent) { // Will update root size if root is not the top root\r\n                        this.parent.adaptWidthToChildren = true;\r\n                        this.parent.adaptHeightToChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n    }\r\n\r\n    private _prepareWorkingCanvasForOpaqueDetection() {\r\n        if (!this._detectPointerOnOpaqueOnly) {\r\n            return;\r\n        }\r\n\r\n        if (!this._workingCanvas) {\r\n            this._workingCanvas = document.createElement('canvas');\r\n        }\r\n        const canvas = this._workingCanvas;\r\n        const width = this._currentMeasure.width;\r\n        const height = this._currentMeasure.height;\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        context.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    private _drawImage(context: CanvasRenderingContext2D, sx: number, sy: number, sw: number, sh: number, tx: number, ty: number, tw: number, th: number) {\r\n        context.drawImage(this._domImage,\r\n            sx, sy, sw, sh,\r\n            tx, ty, tw, th);\r\n\r\n        if (!this._detectPointerOnOpaqueOnly) {\r\n            return;\r\n        }\r\n\r\n        const canvas = this._workingCanvas!;\r\n        context = canvas.getContext(\"2d\")!;\r\n\r\n        context.drawImage(this._domImage,\r\n            sx, sy, sw, sh,\r\n            tx - this._currentMeasure.left, ty - this._currentMeasure.top, tw, th);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._prepareWorkingCanvasForOpaqueDetection();\r\n\r\n        this._applyStates(context);\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    this._drawImage(context, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    this._drawImage(context, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    var hRatio = this._currentMeasure.width / width;\r\n                    var vRatio = this._currentMeasure.height / height;\r\n                    var ratio = Math.min(hRatio, vRatio);\r\n                    var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                    var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                    this._drawImage(context, x, y, width, height,\r\n                        this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    this._drawImage(context, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    this._renderNinePatch(context);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _renderCornerPatch(context: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, targetX: number, targetY: number): void {\r\n        this._drawImage(context, x, y, width, height, this._currentMeasure.left + targetX, this._currentMeasure.top + targetY, width, height);\r\n    }\r\n\r\n    private _renderNinePatch(context: CanvasRenderingContext2D): void {\r\n        let height = this._imageHeight;\r\n        let leftWidth = this._sliceLeft;\r\n        let topHeight = this._sliceTop;\r\n        let bottomHeight = this._imageHeight - this._sliceBottom;\r\n        let rightWidth = this._imageWidth - this._sliceRight;\r\n        let left = 0;\r\n        let top = 0;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            left = 1;\r\n            top = 1;\r\n            height -= 2;\r\n            leftWidth -= 1;\r\n            topHeight -= 1;\r\n            bottomHeight -= 1;\r\n            rightWidth -= 1;\r\n        }\r\n\r\n        const centerWidth = this._sliceRight - this._sliceLeft;\r\n        const targetCenterWidth = this._currentMeasure.width - rightWidth - this.sliceLeft;\r\n        const targetTopHeight = this._currentMeasure.height - height + this._sliceBottom;\r\n\r\n        // Corners\r\n        this._renderCornerPatch(context, left, top, leftWidth, topHeight, 0, 0);\r\n        this._renderCornerPatch(context, left, this._sliceBottom, leftWidth, height - this._sliceBottom, 0, targetTopHeight);\r\n\r\n        this._renderCornerPatch(context, this._sliceRight, top, rightWidth, topHeight, this._currentMeasure.width - rightWidth, 0);\r\n        this._renderCornerPatch(context, this._sliceRight, this._sliceBottom, rightWidth, height - this._sliceBottom, this._currentMeasure.width - rightWidth, targetTopHeight);\r\n\r\n        // Center\r\n        this._drawImage(context, this._sliceLeft, this._sliceTop, centerWidth, this._sliceBottom - this._sliceTop,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top + topHeight, targetCenterWidth, targetTopHeight - topHeight);\r\n\r\n        // Borders\r\n        this._drawImage(context, left, this._sliceTop, leftWidth, this._sliceBottom - this._sliceTop,\r\n            this._currentMeasure.left, this._currentMeasure.top + topHeight, leftWidth, targetTopHeight - topHeight);\r\n\r\n        this._drawImage(context, this._sliceRight, this._sliceTop, leftWidth, this._sliceBottom - this._sliceTop,\r\n            this._currentMeasure.left + this._currentMeasure.width - rightWidth, this._currentMeasure.top + topHeight, leftWidth, targetTopHeight - topHeight);\r\n\r\n        this._drawImage(context, this._sliceLeft, top, centerWidth, topHeight,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top, targetCenterWidth, topHeight);\r\n\r\n        this._drawImage(context, this._sliceLeft, this._sliceBottom, centerWidth, bottomHeight,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top + targetTopHeight, targetCenterWidth, bottomHeight);\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n        this.onSVGAttributesComputedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n    /** NINE_PATCH */\r\n    public static readonly STRETCH_NINE_PATCH = 4;\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Image\"] = Image;\r\n", "import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { PointerInfoBase } from '@babylonjs/core/Events/pointerEvents';\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the button will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    public delegatePickingToChildren = false;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (var index = this._children.length - 1; index >= 0; index--) {\r\n                var child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerEnter(target, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control, pi: PointerInfoBase, force = false): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target, pi, force);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Button\"] = Button;", "import { Tools } from \"@babylonjs/core/Misc/tools\";\r\n\r\nimport { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layou warnings should be ignored\r\n     */\r\n    public ignoreLayoutWarnings = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        for (var child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (!this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        }\r\n\r\n        if (this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                if (child.top !== stackHeight + \"px\") {\r\n                    child.top = stackHeight + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._top.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._height.isPercentage && !child._automaticSize) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using height in percentage mode inside a vertical StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackHeight += child._currentMeasure.height + child.paddingTopInPixels + child.paddingBottomInPixels;\r\n                }\r\n            } else {\r\n                if (child.left !== stackWidth + \"px\") {\r\n                    child.left = stackWidth + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._left.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._width.isPercentage && !child._automaticSize) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using width in percentage mode inside a horizontal StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackWidth += child._currentMeasure.width + child.paddingLeftInPixels + child.paddingRightInPixels;\r\n                }\r\n            }\r\n        }\r\n\r\n        stackWidth += this.paddingLeftInPixels + this.paddingRightInPixels;\r\n        stackHeight += this.paddingTopInPixels + this.paddingBottomInPixels;\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if (!this._manualHeight && this._isVertical) { // do not specify height if strictly defined by user\r\n            let previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if (!this._manualWidth && !this._isVertical) { // do not specify width if strictly defined by user\r\n            let previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.StackPanel\"] = StackPanel;", "import { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { Nullable } from '@babylonjs/core/types';\r\nimport { Measure } from '../measure';\r\nimport { PointerInfoBase } from '@babylonjs/core/Events/pointerEvents';\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColorItem;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Checkbox\"] = Checkbox;\r\n", "/** @hidden */\r\nexport class TextWrapper {\r\n    private _text: string;\r\n    private _characters: string[] | undefined;\r\n\r\n    public get text(): string {\r\n        return this._characters ? this._characters.join(\"\") : this._text;\r\n    }\r\n\r\n    public set text(txt: string) {\r\n        this._text = txt;\r\n        this._characters = Array.from && Array.from(txt);\r\n    }\r\n\r\n    public get length(): number {\r\n        return this._characters ? this._characters.length : this._text.length;\r\n    }\r\n\r\n    public removePart(idxStart: number, idxEnd: number, insertTxt?: string): void {\r\n        this._text = this._text.slice(0, idxStart) + (insertTxt ? insertTxt : \"\") + this._text.slice(idxEnd);\r\n        if (this._characters) {\r\n            const newCharacters = insertTxt ? Array.from(insertTxt) : [];\r\n            this._characters.splice(idxStart, idxEnd - idxStart, ...newCharacters);\r\n        }\r\n    }\r\n\r\n    public charAt(idx: number): string {\r\n        return this._characters ? this._characters[idx] : this._text.charAt(idx);\r\n    }\r\n\r\n    public substr(from: number, length?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from >= 0) {\r\n                from = Math.min(from, this._characters.length);\r\n            } else {\r\n                from = this._characters.length + Math.max(from, -this._characters.length);\r\n            }\r\n            if (length === undefined) {\r\n                length = this._characters.length - from;\r\n            } else if (isNaN(length)) {\r\n                length = 0;\r\n            } else if (length < 0) {\r\n                length = 0;\r\n            }\r\n            const temp = [];\r\n            while (--length >= 0) {\r\n                temp[length] = this._characters[from + length];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substr(from, length);\r\n    }\r\n\r\n    public substring(from: number, to?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from > this._characters.length) {\r\n                from = this._characters.length;\r\n            } else if (from < 0) {\r\n                from = 0;\r\n            }\r\n            if (to === undefined) {\r\n                to = this._characters.length;\r\n            } else if (isNaN(to)) {\r\n                to = 0;\r\n            } else if (to > this._characters.length) {\r\n                to = this._characters.length;\r\n            } else if (to < 0) {\r\n                to = 0;\r\n            }\r\n            const temp = [];\r\n            let idx = 0;\r\n            while (from < to) {\r\n                temp[idx++] = this._characters[from++];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substring(from, to);\r\n    }\r\n\r\n    public isWord(index: number): boolean {\r\n        const rWord = /\\w/g;\r\n        return this._characters ? this._characters[index].search(rWord) !== -1 : this._text.search(rWord) !== -1;\r\n    }\r\n}\r\n", "import { Nullable } from \"@babylonjs/core/types\";\nimport { Observable, Observer } from \"@babylonjs/core/Misc/observable\";\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\nimport { ClipboardEventTypes, ClipboardInfo } from \"@babylonjs/core/Events/clipboardEvents\";\nimport { PointerInfo, PointerEventTypes, PointerInfoBase } from '@babylonjs/core/Events/pointerEvents';\n\nimport { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\nimport { Measure } from '../measure';\nimport { TextWrapper } from './textWrapper';\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _textWrapper: TextWrapper;\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _focusedColor = \"white\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n    private _isTextHighlightOn = false;\n    private _textHighlightColor = \"#d5e0ff\";\n    private _highligherOpacity = 0.4;\n    private _highlightedText = \"\";\n    private _startHighlightIndex = 0;\n    private _endHighlightIndex = 0;\n    private _cursorIndex = -1;\n    private _onFocusSelectAll = false;\n    private _isPointerDown = false;\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n    /** Force disable prompt on mobile device */\n    public disableMobilePrompt = false;\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n    /**Observable raised when the text is highlighted */\n    public onTextHighlightObservable = new Observable<InputText>();\n    /**Observable raised when copy event is triggered */\n    public onTextCopyObservable = new Observable<InputText>();\n    /** Observable raised when cut event is triggered */\n    public onTextCutObservable = new Observable<InputText>();\n    /** Observable raised when paste event is triggered */\n    public onTextPasteObservable = new Observable<InputText>();\n    /** Observable raised when a key event was processed */\n    public onKeyboardEventProcessedObservable = new Observable<KeyboardEvent>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    public get highligherOpacity(): number {\n        return this._highligherOpacity;\n    }\n\n    public set highligherOpacity(value: number) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    public get onFocusSelectAll(): boolean {\n        return this._onFocusSelectAll;\n    }\n\n    public set onFocusSelectAll(value: boolean) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text hightlight color */\n    public get textHighlightColor(): string {\n        return this._textHighlightColor;\n    }\n\n    public set textHighlightColor(value: string) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedColor(): string {\n        return this._focusedColor;\n    }\n\n    public set focusedColor(value: string) {\n        if (this._focusedColor === value) {\n            return;\n        }\n\n        this._focusedColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets the highlight text */\n    public get highlightedText(): string {\n        return this._highlightedText;\n    }\n    public set highlightedText(text: string) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._textWrapper.text;\n    }\n\n    public set text(value: string) {\n        let valueAsString = value.toString(); // Forcing convertion\n\n        if (!this._textWrapper) {\n            this._textWrapper = new TextWrapper();\n        }\n\n        if (this._textWrapper.text === valueAsString) {\n            return;\n        }\n        this._textWrapper.text = valueAsString;\n        this._textHasChanged();\n    }\n\n    private _textHasChanged(): void {\n        this._markAsDirty();\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n        this.isPointerBlocker = true;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        let scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1 && !this.disableMobilePrompt) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n\n        this._host.registerClipboardEvents();\n\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n            switch (clipboardInfo.type) {\n                case ClipboardEventTypes.COPY:\n                    this._onCopyText(clipboardInfo.event);\n                    this.onTextCopyObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.CUT:\n                    this._onCutText(clipboardInfo.event);\n                    this.onTextCutObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.PASTE:\n                    this._onPasteText(clipboardInfo.event);\n                    this.onTextPasteObservable.notifyObservers(this);\n                    break;\n                default: return;\n            }\n        });\n\n        let scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._textWrapper.text && this._textWrapper.length > 0) {\n                    //delete the highlighted text\n                    if (this._isTextHighlightOn) {\n                        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\n                        this._textHasChanged();\n                        this._isTextHighlightOn = false;\n                        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._textWrapper.substr(0, this._textWrapper.length - 1);\n                    } else {\n                        let deletePosition = this._textWrapper.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this._textWrapper.removePart(deletePosition - 1, deletePosition);\n                            this._textHasChanged();\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._isTextHighlightOn) {\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\n                    this._textHasChanged();\n                    this._isTextHighlightOn = false;\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._textWrapper.text && this._textWrapper.length > 0 && this._cursorOffset > 0) {\n                    let deletePosition = this._textWrapper.length - this._cursorOffset;\n                    this._textWrapper.removePart(deletePosition, deletePosition + 1);\n                    this._textHasChanged();\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                this._isTextHighlightOn = false;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._textWrapper.length;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                this._cursorOffset++;\n                if (this._cursorOffset > this._textWrapper.length) {\n                    this._cursorOffset = this._textWrapper.length;\n                }\n\n                if (evt && evt.shiftKey) {\n                    // update the cursor\n                    this._blinkIsEven = false;\n                    // shift + ctrl/cmd + <-\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._textWrapper.length === this._cursorOffset) {\n                                return;\n                            }\n                            else {\n                                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset + 1;\n                            }\n                        }\n                        this._startHighlightIndex = 0;\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\n                        this._cursorOffset = this._textWrapper.length;\n                        this._isTextHighlightOn = true;\n                        this._markAsDirty();\n                        return;\n                    }\n                    //store the starting point\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset >= this._textWrapper.length) ? this._textWrapper.length : this._cursorOffset - 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\n                        this._cursorOffset = (this._startHighlightIndex === 0) ? this._textWrapper.length : this._textWrapper.length - this._startHighlightIndex + 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = this._textWrapper.length;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                if (evt && evt.shiftKey) {\n                    //update the cursor\n                    this._blinkIsEven = false;\n                    //shift + ctrl/cmd + ->\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._cursorOffset === 0) {\n                                return;\n                            }\n                            else {\n                                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset - 1;\n                            }\n                        }\n                        this._endHighlightIndex = this._textWrapper.length;\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\n                        this._cursorOffset = 0;\n                        this._markAsDirty();\n                        return;\n                    }\n\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset <= 0) ? 0 : this._cursorOffset + 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\n                        this._cursorOffset = (this._textWrapper.length === this._endHighlightIndex) ? 0 : this._textWrapper.length - this._endHighlightIndex - 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._textWrapper.length - this._endHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                //ctr + ->\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = 0;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this._cursorIndex = -1;\n                this.deadKey = true;\n                break;\n        }\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._isTextHighlightOn) {\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex, key);\n                    this._textHasChanged();\n                    this._cursorOffset = this._textWrapper.length - (this._startHighlightIndex + 1);\n                    this._isTextHighlightOn = false;\n                    this._blinkIsEven = false;\n                    this._markAsDirty();\n                }\n                else if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._textWrapper.length - this._cursorOffset;\n                    this._textWrapper.removePart(insertPosition, insertPosition, key);\n                    this._textHasChanged();\n                }\n            }\n        }\n    }\n\n    /** @hidden */\n    private _updateValueFromCursorIndex(offset: number) {\n        //update the cursor\n        this._blinkIsEven = false;\n\n        if (this._cursorIndex === -1) {\n            this._cursorIndex = offset;\n        } else {\n            if (this._cursorIndex < this._cursorOffset) {\n                this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\n                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\n            }\n            else if (this._cursorIndex > this._cursorOffset) {\n                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\n                this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\n            }\n            else {\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            }\n        }\n        this._isTextHighlightOn = true;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _processDblClick(evt: PointerInfo) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        let moveLeft, moveRight;\n        do {\n            moveRight = this._endHighlightIndex < this._textWrapper.length && this._textWrapper.isWord(this._endHighlightIndex) ? ++this._endHighlightIndex : 0;\n            moveLeft = this._startHighlightIndex > 0 && this._textWrapper.isWord(this._startHighlightIndex - 1) ? --this._startHighlightIndex : 0;\n        } while (moveLeft || moveRight);\n\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\n        this.onTextHighlightObservable.notifyObservers(this);\n\n        this._isTextHighlightOn = true;\n        this._clickedCoordinate = null;\n        this._blinkIsEven = true;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _selectAllText() {\n        this._blinkIsEven = true;\n        this._isTextHighlightOn = true;\n\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._textWrapper.length;\n        this._cursorOffset = this._textWrapper.length;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: KeyboardEvent): void {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\n    }\n\n    /** @hidden */\n    private _onCopyText(ev: ClipboardEvent): void {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /** @hidden */\n    private _onCutText(ev: ClipboardEvent): void {\n        if (!this._highlightedText) {\n            return;\n        }\n        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\n        this._textHasChanged();\n        this._isTextHighlightOn = false;\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /** @hidden */\n    private _onPasteText(ev: ClipboardEvent): void {\n        let data: string = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        let insertPosition = this._textWrapper.length - this._cursorOffset;\n        this._textWrapper.removePart(insertPosition, insertPosition, data);\n        this._textHasChanged();\n    }\n\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n\n        // Background\n        if (this._isFocused) {\n            if (this._focusedBackground) {\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n        } else if (this._background) {\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        if (!this._fontOffset) {\n            this._fontOffset = Control._GetFontOffset(context.font);\n        }\n\n        // Text\n        let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\n        if (this.color) {\n            context.fillStyle = this.color;\n        }\n\n        let text = this._beforeRenderText(this._textWrapper);\n\n        if (!this._isFocused && !this._textWrapper.text && this._placeholderText) {\n            text = new TextWrapper();\n            text.text = this._placeholderText;\n\n            if (this._placeholderColor) {\n                context.fillStyle = this._placeholderColor;\n            }\n        }\n\n        this._textWidth = context.measureText(text.text).width;\n        let marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\n        if (this._autoStretchWidth) {\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\n        }\n\n        let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n        let availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\n\n        context.save();\n        context.beginPath();\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n        context.clip();\n\n        if (this._isFocused && this._textWidth > availableWidth) {\n            let textLeft = clipTextLeft - this._textWidth + availableWidth;\n            if (!this._scrollLeft) {\n                this._scrollLeft = textLeft;\n            }\n        } else {\n            this._scrollLeft = clipTextLeft;\n        }\n\n        context.fillText(text.text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n        // Cursor\n        if (this._isFocused) {\n\n            // Need to move cursor\n            if (this._clickedCoordinate) {\n                var rightPosition = this._scrollLeft + this._textWidth;\n                var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                var currentSize = 0;\n                this._cursorOffset = 0;\n                var previousDist = 0;\n                do {\n                    if (this._cursorOffset) {\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                    }\n                    this._cursorOffset++;\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                // Find closest move\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                    this._cursorOffset--;\n                }\n\n                this._blinkIsEven = false;\n                this._clickedCoordinate = null;\n            }\n\n            // Render cursor\n            if (!this._blinkIsEven) {\n                let cursorOffsetText = text.substr(text.length - this._cursorOffset);\n                let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                if (cursorLeft < clipTextLeft) {\n                    this._scrollLeft += (clipTextLeft - cursorLeft);\n                    cursorLeft = clipTextLeft;\n                    this._markAsDirty();\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\n                    this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                    cursorLeft = clipTextLeft + availableWidth;\n                    this._markAsDirty();\n                }\n                if (!this._isTextHighlightOn) {\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n            }\n\n            clearTimeout(this._blinkTimeout);\n            this._blinkTimeout = <any>setTimeout(() => {\n                this._blinkIsEven = !this._blinkIsEven;\n                this._markAsDirty();\n            }, 500);\n\n            //show the highlighted text\n            if (this._isTextHighlightOn) {\n                clearTimeout(this._blinkTimeout);\n                let highlightCursorOffsetWidth = context.measureText(text.substring(this._startHighlightIndex)).width;\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                this._highlightedText = text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                let width = context.measureText(text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\n                if (highlightCursorLeft < clipTextLeft) {\n                    width = width - (clipTextLeft - highlightCursorLeft);\n                    if (!width) {\n                        // when using left arrow on text.length > availableWidth;\n                        // assigns the width of the first letter after clipTextLeft\n                        width = context.measureText(text.charAt(text.length - this._cursorOffset)).width;\n                    }\n                    highlightCursorLeft = clipTextLeft;\n                }\n                //for transparancy\n                context.globalAlpha = this._highligherOpacity;\n                context.fillStyle = this._textHighlightColor;\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\n                context.globalAlpha = 1.0;\n            }\n        }\n        context.restore();\n\n        // Border\n        if (this._thickness) {\n            if (this._isFocused) {\n                if (this.focusedColor) {\n                    context.strokeStyle = this.focusedColor;\n                }\n            } else {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n            }\n\n            context.lineWidth = this._thickness;\n\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n        }\n\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        this._cursorIndex = -1;\n        this._isPointerDown = true;\n        this._host._capturingControl[pointerId] = this;\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\n        if (this._host.focusedControl === this && this._isPointerDown) {\n            this._clickedCoordinate = coordinates.x;\n            this._markAsDirty();\n            this._updateValueFromCursorIndex(this._cursorOffset);\n        }\n        super._onPointerMove(target, coordinates, pointerId, pi);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n\n        this._isPointerDown = false;\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(textWrapper: TextWrapper): TextWrapper {\n        return textWrapper;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n        this.onKeyboardEventProcessedObservable.clear();\n    }\n}\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.InputText\"] = InputText;", "import { Nullable } from \"@babylonjs/core/types\";\r\n\r\nimport { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Tools } from '@babylonjs/core/Misc/tools';\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /** Gets the list of cells (e.g. the containers) */\r\n    public get cells(): { [key: string]: Container } {\r\n        return this._cells;\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific row\r\n     * @param index defines the index of the row\r\n     * @returns the row definition\r\n     */\r\n    public getRowDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._rowDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific column\r\n     * @param index defines the index of the column\r\n     * @returns the column definition\r\n     */\r\n    public getColumnDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._columnDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._rowDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === height) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._columnDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === width) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the child cell info (row x column)\r\n     * @param child defines the control to get info from\r\n     * @returns a string containing the child cell info (row x column)\r\n     */\r\n    public getChildCellInfo(child: Control): string {\r\n        return child._tag;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        if (this._childControls.indexOf(control) !== -1) {\r\n            Tools.Warn(`Control (Name:${control.name}, UniqueId:${control.uniqueId}) is already associated with this grid. You must remove it before reattaching it`);\r\n            return this;\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n            control._tag = null;\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (var key in this._cells) {\r\n                if (!this._cells.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                let split = key.split(\":\");\r\n                let x = parseInt(split[0]);\r\n                let y = parseInt(split[1]);\r\n                let cell = this._cells[key];\r\n\r\n                cell.left = lefts[y] + \"px\";\r\n                cell.top = tops[x] + \"px\";\r\n                cell.width = widths[y] + \"px\";\r\n                cell.height = heights[x] + \"px\";\r\n                cell._left.ignoreAdaptiveScaling = true;\r\n                cell._top.ignoreAdaptiveScaling = true;\r\n                cell._width.ignoreAdaptiveScaling = true;\r\n                cell._height.ignoreAdaptiveScaling = true;\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            let child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n\r\n            // Columns\r\n            for (var index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (var index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._childControls = [];\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Grid\"] = Grid;", "import { Observable } from \"@babylonjs/core/Misc/observable\";\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\n\nimport { Control } from \"./control\";\nimport { Measure } from \"../measure\";\nimport { InputText } from \"./inputText\";\nimport { Rectangle } from \"./rectangle\";\nimport { Button } from \"./button\";\nimport { Grid } from \"./grid\";\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\nimport { TextBlock } from \"../controls/textBlock\";\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\nimport { PointerInfoBase } from '@babylonjs/core/Events/pointerEvents';\n\n/** Class used to create color pickers */\nexport class ColorPicker extends Control {\n    private static _Epsilon = 0.000001;\n    private _colorWheelCanvas: HTMLCanvasElement;\n\n    private _value: Color3 = Color3.Red();\n    private _tmpColor = new Color3();\n\n    private _pointerStartedOnSquare = false;\n    private _pointerStartedOnWheel = false;\n\n    private _squareLeft = 0;\n    private _squareTop = 0;\n    private _squareSize = 0;\n\n    private _h = 360;\n    private _s = 1;\n    private _v = 1;\n\n    private _lastPointerDownID = -1;\n\n    /**\n     * Observable raised when the value changes\n     */\n    public onValueChangedObservable = new Observable<Color3>();\n\n    /** Gets or sets the color of the color picker */\n    public get value(): Color3 {\n        return this._value;\n    }\n\n    public set value(value: Color3) {\n        if (this._value.equals(value)) {\n            return;\n        }\n\n        this._value.copyFrom(value);\n\n        this._value.toHSVToRef(this._tmpColor);\n\n        this._h = this._tmpColor.r;\n        this._s = Math.max(this._tmpColor.g, 0.00001);\n        this._v = Math.max(this._tmpColor.b, 0.00001);\n\n        this._markAsDirty();\n\n        if (this._value.r <= ColorPicker._Epsilon) {\n            this._value.r = 0;\n        }\n\n        if (this._value.g <= ColorPicker._Epsilon) {\n            this._value.g = 0;\n        }\n\n        if (this._value.b <= ColorPicker._Epsilon) {\n            this._value.b = 0;\n        }\n\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\n            this._value.r = 1.0;\n        }\n\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\n            this._value.g = 1.0;\n        }\n\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\n            this._value.b = 1.0;\n        }\n\n        this.onValueChangedObservable.notifyObservers(this._value);\n    }\n\n    /**\n     * Gets or sets control width\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._height.fromString(value);\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets control height\n     * @see https://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get height(): string | number {\n        return this._height.toString(this._host);\n    }\n\n    /** Gets or sets control height */\n    public set height(value: string | number) {\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._height.fromString(value)) {\n            this._width.fromString(value);\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets control size */\n    public get size(): string | number {\n        return this.width;\n    }\n\n    public set size(value: string | number) {\n        this.width = value;\n    }\n\n    /**\n     * Creates a new ColorPicker\n     * @param name defines the control name\n     */\n    constructor(public name?: string) {\n        super(name);\n        this.value = new Color3(.88, .1, .1);\n        this.size = \"200px\";\n        this.isPointerBlocker = true;\n    }\n\n    protected _getTypeName(): string {\n        return \"ColorPicker\";\n    }\n\n    /** @hidden */\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n\n        if (parentMeasure.width < parentMeasure.height) {\n            this._currentMeasure.height = parentMeasure.width;\n        } else {\n            this._currentMeasure.width = parentMeasure.height;\n        }\n    }\n\n    private _updateSquareProps(): void {\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var wheelThickness = radius * .2;\n        var innerDiameter = (radius - wheelThickness) * 2;\n        var squareSize = innerDiameter / (Math.sqrt(2));\n        var offset = radius - squareSize * .5;\n\n        this._squareLeft = this._currentMeasure.left + offset;\n        this._squareTop = this._currentMeasure.top + offset;\n        this._squareSize = squareSize;\n    }\n\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\n        var lgh = context.createLinearGradient(left, top, width + left, top);\n        lgh.addColorStop(0, '#fff');\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\n\n        context.fillStyle = lgh;\n        context.fillRect(left, top, width, height);\n\n        var lgv = context.createLinearGradient(left, top, left, height + top);\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\n        lgv.addColorStop(1, '#000');\n\n        context.fillStyle = lgv;\n        context.fillRect(left, top, width, height);\n    }\n\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\n        context.beginPath();\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = '#333333';\n        context.stroke();\n        context.beginPath();\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = '#ffffff';\n        context.stroke();\n    }\n\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = radius * 2;\n        canvas.height = radius * 2;\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\n        var data = image.data;\n\n        var color = this._tmpColor;\n        var maxDistSq = radius * radius;\n        var innerRadius = radius - thickness;\n        var minDistSq = innerRadius * innerRadius;\n\n        for (var x = -radius; x < radius; x++) {\n            for (var y = -radius; y < radius; y++) {\n\n                var distSq = x * x + y * y;\n\n                if (distSq > maxDistSq || distSq < minDistSq) {\n                    continue;\n                }\n\n                var dist = Math.sqrt(distSq);\n                var ang = Math.atan2(y, x);\n\n                Color3.HSVtoRGBToRef(ang * 180 / Math.PI + 180, dist / radius, 1, color);\n\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\n\n                data[index] = color.r * 255;\n                data[index + 1] = color.g * 255;\n                data[index + 2] = color.b * 255;\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n\n                //apply less alpha to bigger color pickers\n                var alphaAmount = .2;\n                var maxAlpha = .2;\n                var minAlpha = .04;\n                var lowerRadius = 50;\n                var upperRadius = 150;\n\n                if (radius < lowerRadius) {\n                    alphaAmount = maxAlpha;\n                } else if (radius > upperRadius) {\n                    alphaAmount = minAlpha;\n                } else {\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\n                }\n\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n\n                if (alphaRatio < alphaAmount) {\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\n                } else if (alphaRatio > 1 - alphaAmount) {\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\n                } else {\n                    data[index + 3] = 255;\n                }\n\n            }\n        }\n\n        context.putImageData(image, 0, 0);\n\n        return canvas;\n    }\n\n    /** @hidden */\n    public _draw(context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var wheelThickness = radius * .2;\n        var left = this._currentMeasure.left;\n        var top = this._currentMeasure.top;\n\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\n        }\n\n        this._updateSquareProps();\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\n        }\n\n        context.drawImage(this._colorWheelCanvas, left, top);\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        this._drawGradientSquare(this._h,\n            this._squareLeft,\n            this._squareTop,\n            this._squareSize,\n            this._squareSize,\n            context);\n\n        var cx = this._squareLeft + this._squareSize * this._s;\n        var cy = this._squareTop + this._squareSize * (1 - this._v);\n\n        this._drawCircle(cx, cy, radius * .04, context);\n\n        var dist = radius - wheelThickness * .5;\n        cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\n        cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\n        this._drawCircle(cx, cy, wheelThickness * .35, context);\n\n        context.restore();\n    }\n\n    // Events\n    private _pointerIsDown = false;\n\n    private _updateValueFromPointer(x: number, y: number): void {\n        if (this._pointerStartedOnWheel) {\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n            var centerX = radius + this._currentMeasure.left;\n            var centerY = radius + this._currentMeasure.top;\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\n        }\n        else if (this._pointerStartedOnSquare) {\n            this._updateSquareProps();\n            this._s = (x - this._squareLeft) / this._squareSize;\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\n            this._s = Math.min(this._s, 1);\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\n            this._v = Math.min(this._v, 1);\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\n        }\n\n        Color3.HSVtoRGBToRef(this._h, this._s, this._v, this._tmpColor);\n\n        this.value = this._tmpColor;\n    }\n\n    private _isPointOnSquare(x: number, y: number): boolean {\n        this._updateSquareProps();\n\n        var left = this._squareLeft;\n        var top = this._squareTop;\n        var size = this._squareSize;\n\n        if (x >= left && x <= left + size &&\n            y >= top && y <= top + size) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private _isPointOnWheel(x: number, y: number): boolean {\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var centerX = radius + this._currentMeasure.left;\n        var centerY = radius + this._currentMeasure.top;\n        var wheelThickness = radius * .2;\n        var innerRadius = radius - wheelThickness;\n        var radiusSq = radius * radius;\n        var innerRadiusSq = innerRadius * innerRadius;\n\n        var dx = x - centerX;\n        var dy = y - centerY;\n\n        var distSq = dx * dx + dy * dy;\n\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\n            return false;\n        }\n\n        this._pointerIsDown = true;\n\n        this._pointerStartedOnSquare = false;\n        this._pointerStartedOnWheel = false;\n\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n\n        let x = this._transformedPosition.x;\n        let y = this._transformedPosition.y;\n\n        if (this._isPointOnSquare(x, y)) {\n            this._pointerStartedOnSquare = true;\n        } else if (this._isPointOnWheel(x, y)) {\n            this._pointerStartedOnWheel = true;\n        }\n\n        this._updateValueFromPointer(x, y);\n        this._host._capturingControl[pointerId] = this;\n        this._lastPointerDownID = pointerId;\n        return true;\n    }\n\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\n        if (pointerId != this._lastPointerDownID) {\n            return;\n        }\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n\n        let x = this._transformedPosition.x;\n        let y = this._transformedPosition.y;\n\n        if (this._pointerIsDown) {\n            this._updateValueFromPointer(x, y);\n        }\n\n        super._onPointerMove(target, coordinates, pointerId, pi);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\n        this._pointerIsDown = false;\n\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\n    }\n\n    public _onCanvasBlur() {\n        this._forcePointerUp();\n        super._onCanvasBlur();\n    }\n\n    /**\n     * This function expands the color picker by creating a color picker dialog with manual\n     * color value input and the ability to save colors into an array to be used later in\n     * subsequent launches of the dialogue.\n     * @param advancedTexture defines the AdvancedDynamicTexture the dialog is assigned to\n     * @param options defines size for dialog and options for saved colors. Also accepts last color picked as hex string and saved colors array as hex strings.\n     * @returns picked color as a hex string and the saved colors array as hex strings.\n     */\n    public static ShowPickerDialogAsync(advancedTexture: AdvancedDynamicTexture,\n        options: {\n            pickerWidth?: string,\n            pickerHeight?: string,\n            headerHeight?: string,\n            lastColor?: string,\n            swatchLimit?: number,\n            numSwatchesPerLine?: number,\n            savedColors?: Array<string>\n        }\n    ): Promise<{\n        savedColors?: string[],\n        pickedColor: string\n    }> {\n\n        return new Promise((resolve, reject) => {\n            // Default options\n            options.pickerWidth = options.pickerWidth || \"640px\";\n            options.pickerHeight = options.pickerHeight || \"400px\";\n            options.headerHeight = options.headerHeight || \"35px\";\n            options.lastColor = options.lastColor || \"#000000\";\n            options.swatchLimit = options.swatchLimit || 20;\n            options.numSwatchesPerLine = options.numSwatchesPerLine || 10;\n\n            // Window size settings\n            var drawerMaxRows: number = options.swatchLimit / options.numSwatchesPerLine;\n            var rawSwatchSize: number = parseFloat(<string>options.pickerWidth) / options.numSwatchesPerLine;\n            var gutterSize: number = Math.floor(rawSwatchSize * 0.25);\n            var colGutters: number = gutterSize * (options.numSwatchesPerLine + 1);\n            var swatchSize: number = Math.floor((parseFloat(<string>options.pickerWidth) - colGutters) / options.numSwatchesPerLine);\n            var drawerMaxSize: number = (swatchSize * drawerMaxRows) + (gutterSize * (drawerMaxRows + 1));\n            var containerSize: string = (parseInt(options.pickerHeight) + drawerMaxSize + Math.floor(swatchSize * 0.25)).toString() + \"px\";\n\n            // Button Colors\n            var buttonColor: string = \"#c0c0c0\";\n            var buttonBackgroundColor: string = \"#535353\";\n            var buttonBackgroundHoverColor: string = \"#414141\";\n            var buttonBackgroundClickColor: string = \"515151\";\n            var buttonDisabledColor: string = \"#555555\";\n            var buttonDisabledBackgroundColor: string = \"#454545\";\n            var currentSwatchesOutlineColor: string = \"#404040\";\n            var luminanceLimitColor: Color3 = Color3.FromHexString(\"#dddddd\");\n            var luminanceLimit: number = luminanceLimitColor.r + luminanceLimitColor.g + luminanceLimitColor.b;\n            var iconColorDark: string = \"#aaaaaa\";\n            var iconColorLight: string = \"#ffffff\";\n            var closeIconColor: Color3;\n\n            // Button settings\n            var buttonFontSize: number;\n            var butEdit: Button;\n            var buttonWidth: string;\n            var buttonHeight: string;\n\n            // Input Text Colors\n            var inputFieldLabels: string[] = [\"R\", \"G\", \"B\"];\n            var inputTextBackgroundColor: string = \"#454545\";\n            var inputTextColor: string = \"#f0f0f0\";\n\n            // This is the current color as set by either the picker or by entering a value\n            var currentColor: Color3;\n\n            // This int is used for naming swatches and serves as the index for calling them from the list\n            var swatchNumber: number;\n\n            // Menu Panel options. We need to know if the swatchDrawer exists so we can create it if needed.\n            var swatchDrawer: Grid;\n            var editSwatchMode: boolean = false;\n\n            // Color InputText fields that will be updated upon value change\n            var picker: ColorPicker;\n            var rValInt: InputText;\n            var gValInt: InputText;\n            var bValInt: InputText;\n            var rValDec: InputText;\n            var gValDec: InputText;\n            var bValDec: InputText;\n            var hexVal: InputText;\n            var newSwatch: Rectangle;\n            var lastVal: string;\n            var activeField: string;\n\n            /**\n            * Will update all values for InputText and ColorPicker controls based on the BABYLON.Color3 passed to this function.\n            * Each InputText control and the ColorPicker control will be tested to see if they are the activeField and if they\n            * are will receive no update. This is to prevent the input from the user being overwritten.\n            */\n            function updateValues(value: Color3, inputField: string) {\n                activeField = inputField;\n                var pickedColor: string = value.toHexString();\n                newSwatch.background = pickedColor;\n                if (rValInt.name != activeField) {\n                    rValInt.text = Math.floor(value.r * 255).toString();\n                }\n                if (gValInt.name != activeField) {\n                    gValInt.text = Math.floor(value.g * 255).toString();\n                }\n                if (bValInt.name != activeField) {\n                    bValInt.text = Math.floor(value.b * 255).toString();\n                }\n                if (rValDec.name != activeField) {\n                    rValDec.text = value.r.toString();\n                }\n                if (gValDec.name != activeField) {\n                    gValDec.text = value.g.toString();\n                }\n                if (bValDec.name != activeField) {\n                    bValDec.text = value.b.toString();\n                }\n                if (hexVal.name != activeField) {\n                    var minusPound: string[] = pickedColor.split(\"#\");\n                    hexVal.text = minusPound[1];\n                }\n                if (picker.name != activeField) {\n                    picker.value = value;\n                }\n            }\n\n            // When the user enters an integer for R, G, or B we check to make sure it is a valid number and replace if not.\n            function updateInt(field: InputText, channel: string) {\n                var newValue: string = field.text;\n                var checkVal: boolean = /[^0-9]/g.test(newValue);\n                if (checkVal) {\n                    field.text = lastVal;\n                    return;\n                }\n                else {\n                    if (newValue != \"\") {\n                        if (Math.floor(parseInt(newValue)) < 0) {\n                            newValue = \"0\";\n                        }\n                        else if (Math.floor(parseInt(newValue)) > 255) {\n                            newValue = \"255\";\n                        }\n                        else if (isNaN(parseInt(newValue))) {\n                            newValue = \"0\";\n                        }\n                    }\n                    if (activeField == field.name) {\n                        lastVal = newValue;\n                    }\n                }\n                if (newValue != \"\") {\n                    newValue = parseInt(newValue).toString();\n                    field.text = newValue;\n                    var newSwatchRGB: Color3 = Color3.FromHexString(newSwatch.background);\n                    if (activeField == field.name) {\n                        if (channel == \"r\") {\n                            updateValues(new Color3((parseInt(newValue)) / 255, newSwatchRGB.g, newSwatchRGB.b), field.name);\n                        }\n                        else if (channel == \"g\") {\n                            updateValues(new Color3(newSwatchRGB.r, (parseInt(newValue)) / 255, newSwatchRGB.b), field.name);\n                        }\n                        else {\n                            updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, (parseInt(newValue)) / 255), field.name);\n                        }\n                    }\n                }\n            }\n\n            // When the user enters a float for R, G, or B we check to make sure it is a valid number and replace if not.\n            function updateFloat(field: InputText, channel: string) {\n                var newValue: string = field.text;\n                var checkVal: boolean = /[^0-9\\.]/g.test(newValue);\n                if (checkVal) {\n                    field.text = lastVal;\n                    return;\n                }\n                else {\n                    if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\n                        if (parseFloat(newValue) < 0.0) {\n                            newValue = \"0.0\";\n                        }\n                        else if (parseFloat(newValue) > 1.0) {\n                            newValue = \"1.0\";\n                        }\n                        else if (isNaN(parseFloat(newValue))) {\n                            newValue = \"0.0\";\n                        }\n                    }\n                    if (activeField == field.name) {\n                        lastVal = newValue;\n                    }\n                }\n                if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\n                    newValue = parseFloat(newValue).toString();\n                    field.text = newValue;\n                }\n                else {\n                    newValue = \"0.0\";\n                }\n                var newSwatchRGB = Color3.FromHexString(newSwatch.background);\n                if (activeField == field.name) {\n                    if (channel == \"r\") {\n                        updateValues(new Color3(parseFloat(newValue), newSwatchRGB.g, newSwatchRGB.b), field.name);\n                    }\n                    else if (channel == \"g\") {\n                        updateValues(new Color3(newSwatchRGB.r, parseFloat(newValue), newSwatchRGB.b), field.name);\n                    }\n                    else {\n                        updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, parseFloat(newValue)), field.name);\n                    }\n                }\n\n            }\n\n            // Removes the current index from the savedColors array. Drawer can then be regenerated.\n            function deleteSwatch(index: number) {\n                if (options.savedColors) {\n                    options.savedColors.splice(index, 1);\n                }\n                if (options.savedColors && options.savedColors.length == 0) {\n                    setEditButtonVisibility(false);\n                    editSwatchMode = false;\n                }\n            }\n\n            // Creates and styles an individual swatch when updateSwatches is called.\n            function createSwatch() {\n                if (options.savedColors && options.savedColors[swatchNumber]) {\n                    if (editSwatchMode) {\n                        var icon: string = \"b\";\n                    }\n                    else {\n                        var icon: string = \"\";\n                    }\n                    var swatch: Button = Button.CreateSimpleButton(\"Swatch_\" + swatchNumber, icon);\n                    swatch.fontFamily = \"BabylonJSglyphs\";\n                    var swatchColor: Color3 = Color3.FromHexString(options.savedColors[swatchNumber]);\n                    var swatchLuminence: number = swatchColor.r + swatchColor.g + swatchColor.b;\n\n                    // Set color of outline and textBlock based on luminance of the color swatch so feedback always visible\n                    if (swatchLuminence > luminanceLimit) {\n                        swatch.color = iconColorDark;\n                    }\n                    else {\n                        swatch.color = iconColorLight;\n                    }\n                    swatch.fontSize = Math.floor(swatchSize * 0.7);\n                    swatch.textBlock!.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n                    swatch.height = swatch.width = (swatchSize).toString() + \"px\";\n                    swatch.background = options.savedColors[swatchNumber];\n                    swatch.thickness = 2;\n                    let metadata = swatchNumber;\n                    swatch.pointerDownAnimation = () => {\n                        swatch.thickness = 4;\n                    };\n                    swatch.pointerUpAnimation = () => {\n                        swatch.thickness = 3;\n                    };\n                    swatch.pointerEnterAnimation = () => {\n                        swatch.thickness = 3;\n                    };\n                    swatch.pointerOutAnimation = () => {\n                        swatch.thickness = 2;\n                    };\n                    swatch.onPointerClickObservable.add(() => {\n                        if (!editSwatchMode) {\n                            if (options.savedColors) {\n                                updateValues(Color3.FromHexString(options.savedColors[metadata]), swatch.name!);\n                            }\n                        }\n                        else {\n                            deleteSwatch(metadata);\n                            updateSwatches(\"\", butSave);\n                        }\n                    });\n                    return swatch;\n                }\n                else {\n                    return null;\n                }\n            }\n\n            // Mode switch to render button text and close symbols on swatch controls\n            function editSwatches(mode?: boolean) {\n                if (mode !== undefined) {\n                    editSwatchMode = mode;\n                }\n                if (editSwatchMode) {\n                    for (var i = 0; i < swatchDrawer.children.length; i++) {\n                        var thisButton: Button = swatchDrawer.children[i] as Button;\n                        thisButton.textBlock!.text = \"b\";\n                    }\n                    if (butEdit !== undefined) {\n                        butEdit.textBlock!.text = \"Done\";\n                    }\n                }\n                else {\n                    for (var i = 0; i < swatchDrawer.children.length; i++) {\n                        var thisButton: Button = swatchDrawer.children[i] as Button;\n                        thisButton.textBlock!.text = \"\";\n                    }\n                    if (butEdit !== undefined) {\n                        butEdit.textBlock!.text = \"Edit\";\n                    }\n                }\n            }\n\n            /**\n             * When Save Color button is pressed this function will first create a swatch drawer if one is not already\n             * made. Then all controls are removed from the drawer and we step through the savedColors array and\n             * creates one swatch per color. It will also set the height of the drawer control based on how many\n             * saved colors there are and how many can be stored per row.\n             */\n            function updateSwatches(color: string, button: Button) {\n                if (options.savedColors) {\n\n                    if (color != \"\") {\n                        options.savedColors.push(color);\n                    }\n                    swatchNumber = 0;\n                    swatchDrawer.clearControls();\n                    var rowCount: number = Math.ceil(options.savedColors.length / options.numSwatchesPerLine!);\n                    if (rowCount == 0) {\n                        var gutterCount: number = 0;\n                    }\n                    else {\n                        var gutterCount: number = rowCount + 1;\n                    }\n                    if (swatchDrawer.rowCount != rowCount + gutterCount) {\n                        var currentRows: number = swatchDrawer.rowCount;\n                        for (var i = 0; i < currentRows; i++) {\n                            swatchDrawer.removeRowDefinition(0);\n                        }\n                        for (var i = 0; i < rowCount + gutterCount; i++) {\n                            if (i % 2) {\n                                swatchDrawer.addRowDefinition(swatchSize, true);\n                            }\n                            else {\n                                swatchDrawer.addRowDefinition(gutterSize, true);\n                            }\n                        }\n                    }\n                    swatchDrawer.height = ((swatchSize * rowCount) + (gutterCount * gutterSize)).toString() + \"px\";\n\n                    for (var y = 1, thisRow = 1; y < rowCount + gutterCount; y += 2, thisRow++) {\n\n                        // Determine number of buttons to create per row based on the button limit per row and number of saved colors\n                        if (options.savedColors.length > thisRow * options.numSwatchesPerLine!) {\n                            var totalButtonsThisRow = options.numSwatchesPerLine!;\n                        }\n                        else {\n                            var totalButtonsThisRow = options.savedColors.length - ((thisRow - 1) * options.numSwatchesPerLine!);\n                        }\n                        var buttonIterations: number = (Math.min(Math.max(totalButtonsThisRow, 0), options.numSwatchesPerLine!));\n                        for (var x = 0, w = 1; x < buttonIterations; x++) {\n                            if (x > options.numSwatchesPerLine!) {\n                                continue;\n                            }\n                            var swatch: Button | null = createSwatch();\n                            if (swatch != null) {\n                                swatchDrawer.addControl(swatch, y, w);\n                                w += 2;\n                                swatchNumber++;\n                            }\n                            else {\n                                continue;\n                            }\n                        }\n                    }\n                    if (options.savedColors.length >= options.swatchLimit!) {\n                        disableButton(button, true);\n                    }\n                    else {\n                        disableButton(button, false);\n                    }\n                }\n            }\n\n            // Shows or hides edit swatches button depending on if there are saved swatches\n            function setEditButtonVisibility(enableButton: boolean) {\n                if (enableButton) {\n                    butEdit = Button.CreateSimpleButton(\"butEdit\", \"Edit\");\n                    butEdit.width = buttonWidth;\n                    butEdit.height = buttonHeight;\n                    butEdit.left = (Math.floor(parseInt(buttonWidth) * 0.1)).toString() + \"px\";\n                    butEdit.top = (parseFloat(butEdit.left) * -1).toString() + \"px\";\n                    butEdit.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\n                    butEdit.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n                    butEdit.thickness = 2;\n                    butEdit.color = buttonColor;\n                    butEdit.fontSize = buttonFontSize;\n                    butEdit.background = buttonBackgroundColor;\n                    butEdit.onPointerEnterObservable.add(() => {\n                        butEdit.background = buttonBackgroundHoverColor;\n                    });\n                    butEdit.onPointerOutObservable.add(() => {\n                        butEdit.background = buttonBackgroundColor;\n                    });\n                    butEdit.pointerDownAnimation = () => {\n                        butEdit.background = buttonBackgroundClickColor;\n                    };\n                    butEdit.pointerUpAnimation = () => {\n                        butEdit.background = buttonBackgroundHoverColor;\n                    };\n                    butEdit.onPointerClickObservable.add(() => {\n                        if (editSwatchMode) {\n                            editSwatchMode = false;\n                        }\n                        else {\n                            editSwatchMode = true;\n                        }\n                        editSwatches();\n                    });\n                    pickerGrid.addControl(butEdit, 1, 0);\n                }\n                else {\n                    pickerGrid.removeControl(butEdit);\n                }\n            }\n\n            // Called when the user hits the limit of saved colors in the drawer.\n            function disableButton(button: Button, disabled: boolean) {\n                if (disabled) {\n                    button.color = buttonDisabledColor;\n                    button.background = buttonDisabledBackgroundColor;\n                }\n                else {\n                    button.color = buttonColor;\n                    button.background = buttonBackgroundColor;\n                }\n            }\n\n            // Passes last chosen color back to scene and kills dialog by removing from AdvancedDynamicTexture\n            function closePicker(color: string) {\n                if (options.savedColors && options.savedColors.length > 0) {\n                    resolve({\n                        savedColors: options.savedColors,\n                        pickedColor: color\n                    });\n                }\n                else {\n                    resolve({\n                        pickedColor: color\n                    });\n                }\n                advancedTexture.removeControl(dialogContainer);\n            }\n\n            // Dialogue menu container which will contain both the main dialogue window and the swatch drawer which opens once a color is saved.\n            var dialogContainer: Grid = new Grid();\n            dialogContainer.name = \"Dialog Container\";\n            dialogContainer.width = options.pickerWidth;\n            if (options.savedColors) {\n                dialogContainer.height = containerSize;\n                var topRow: number = parseInt(options.pickerHeight) / parseInt(containerSize);\n                dialogContainer.addRowDefinition(topRow, false);\n                dialogContainer.addRowDefinition(1.0 - topRow, false);\n            }\n            else {\n                dialogContainer.height = options.pickerHeight;\n                dialogContainer.addRowDefinition(1.0, false);\n            }\n            advancedTexture.addControl(dialogContainer);\n\n            // Swatch drawer which contains all saved color buttons\n            if (options.savedColors) {\n                swatchDrawer = new Grid();\n                swatchDrawer.name = \"Swatch Drawer\";\n                swatchDrawer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n                swatchDrawer.background = buttonBackgroundColor;\n                swatchDrawer.width = options.pickerWidth!;\n                var initialRows: number = options.savedColors.length / options.numSwatchesPerLine;\n                if (initialRows == 0) {\n                    var gutterCount: number = 0;\n                }\n                else {\n                    var gutterCount: number = initialRows + 1;\n                }\n                swatchDrawer.height = ((swatchSize * initialRows) + (gutterCount * gutterSize)).toString() + \"px\";\n                swatchDrawer.top = Math.floor(swatchSize * 0.25).toString() + \"px\";\n                for (var i = 0; i < (Math.ceil(options.savedColors.length / options.numSwatchesPerLine) * 2) + 1; i++) {\n                    if (i % 2 != 0) {\n                        swatchDrawer.addRowDefinition(swatchSize, true);\n                    }\n                    else {\n                        swatchDrawer.addRowDefinition(gutterSize, true);\n                    }\n                }\n                for (var i = 0; i < options.numSwatchesPerLine! * 2 + 1; i++) {\n                    if (i % 2 != 0) {\n                        swatchDrawer.addColumnDefinition(swatchSize, true);\n                    }\n                    else {\n                        swatchDrawer.addColumnDefinition(gutterSize, true);\n                    }\n                }\n                dialogContainer.addControl(swatchDrawer, 1, 0);\n            }\n\n            // Picker container\n            var pickerPanel: Grid = new Grid();\n            pickerPanel.name = \"Picker Panel\";\n            pickerPanel.height = options.pickerHeight;\n            var panelHead: number = parseInt(options.headerHeight) / parseInt(options.pickerHeight);\n            var pickerPanelRows: number[] = [panelHead, 1.0 - panelHead];\n            pickerPanel.addRowDefinition(pickerPanelRows[0], false);\n            pickerPanel.addRowDefinition(pickerPanelRows[1], false);\n            dialogContainer.addControl(pickerPanel, 0, 0);\n\n            // Picker container header\n            var header: Rectangle = new Rectangle();\n            header.name = \"Dialogue Header Bar\";\n            header.background = \"#cccccc\";\n            header.thickness = 0;\n            pickerPanel.addControl(header, 0, 0);\n\n            // Header close button\n            var closeButton: Button = Button.CreateSimpleButton(\"closeButton\", \"a\");\n            closeButton.fontFamily = \"BabylonJSglyphs\";\n            var headerColor3: Color3 = Color3.FromHexString(header.background);\n            closeIconColor = new Color3(1.0 - headerColor3.r, 1.0 - headerColor3.g, 1.0 - headerColor3.b);\n            closeButton.color = closeIconColor.toHexString();\n            closeButton.fontSize = Math.floor(parseInt(options.headerHeight!) * 0.6);\n            closeButton.textBlock!.textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            closeButton.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_RIGHT;\n            closeButton.height = closeButton.width = options.headerHeight;\n            closeButton.background = header.background;\n            closeButton.thickness = 0;\n            closeButton.pointerDownAnimation = () => {\n            };\n            closeButton.pointerUpAnimation = () => {\n                closeButton.background = header.background;\n            };\n            closeButton.pointerEnterAnimation = () => {\n                closeButton.color = header.background;\n                closeButton.background = \"red\";\n            };\n            closeButton.pointerOutAnimation = () => {\n                closeButton.color = closeIconColor.toHexString();\n                closeButton.background = header.background;\n            };\n            closeButton.onPointerClickObservable.add(() => {\n                closePicker(currentSwatch.background);\n            });\n            pickerPanel.addControl(closeButton, 0, 0);\n\n            // Dialog container body\n            var dialogBody: Grid = new Grid();\n            dialogBody.name = \"Dialogue Body\";\n            dialogBody.background = buttonBackgroundColor;\n            var dialogBodyCols: number[] = [0.4375, 0.5625];\n            dialogBody.addRowDefinition(1.0, false);\n            dialogBody.addColumnDefinition(dialogBodyCols[0], false);\n            dialogBody.addColumnDefinition(dialogBodyCols[1], false);\n            pickerPanel.addControl(dialogBody, 1, 0);\n\n            // Picker grid\n            var pickerGrid: Grid = new Grid();\n            pickerGrid.name = \"Picker Grid\";\n            pickerGrid.addRowDefinition(0.85, false);\n            pickerGrid.addRowDefinition(0.15, false);\n            dialogBody.addControl(pickerGrid, 0, 0);\n\n            //  Picker control\n            picker = new ColorPicker();\n            picker.name = \"GUI Color Picker\";\n            if (options.pickerHeight < options.pickerWidth) {\n                picker.width = 0.89;\n            }\n            else {\n                picker.height = 0.89;\n            }\n            picker.value = Color3.FromHexString(options.lastColor);\n            picker.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n            picker.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            picker.onPointerDownObservable.add(() => {\n                activeField = picker.name!;\n                lastVal = \"\";\n                editSwatches(false);\n            });\n            picker.onValueChangedObservable.add(function(value) { // value is a color3\n                if (activeField == picker.name) {\n                    updateValues(value, picker.name);\n                }\n            });\n            pickerGrid.addControl(picker, 0, 0);\n\n            // Picker body right quarant\n            var pickerBodyRight: Grid = new Grid();\n            pickerBodyRight.name = \"Dialogue Right Half\";\n            pickerBodyRight.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n            var pickerBodyRightRows: number[] = [0.514, 0.486];\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[0], false);\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[1], false);\n            dialogBody.addControl(pickerBodyRight, 1, 1);\n\n            // Picker container swatches and buttons\n            var pickerSwatchesButtons: Grid = new Grid();\n            pickerSwatchesButtons.name = \"Swatches and Buttons\";\n            var pickerButtonsCol: number[] = [0.417, 0.583];\n            pickerSwatchesButtons.addRowDefinition(1.0, false);\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[0], false);\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[1], false);\n            pickerBodyRight.addControl(pickerSwatchesButtons, 0, 0);\n\n            // Picker Swatches quadrant\n            var pickerSwatches: Grid = new Grid();\n            pickerSwatches.name = \"New and Current Swatches\";\n            var pickeSwatchesRows: number[] = [0.04, 0.16, 0.64, 0.16];\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[0], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[1], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[2], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[3], false);\n            pickerSwatchesButtons.addControl(pickerSwatches, 0, 0);\n\n            // Active swatches\n            var activeSwatches: Grid = new Grid();\n            activeSwatches.name = \"Active Swatches\";\n            activeSwatches.width = 0.67;\n            activeSwatches.addRowDefinition(0.5, false);\n            activeSwatches.addRowDefinition(0.5, false);\n            pickerSwatches.addControl(activeSwatches, 2, 0);\n\n            var labelWidth: number = (Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[0] * 0.11));\n            var labelHeight: number = (Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * pickeSwatchesRows[1] * 0.5));\n\n            if (options.pickerWidth > options.pickerHeight) {\n                var labelTextSize: number = labelHeight;\n            }\n            else {\n                var labelTextSize: number = labelWidth;\n            }\n            // New color swatch and previous color button\n            var newText: TextBlock = new TextBlock();\n            newText.text = \"new\";\n            newText.name = \"New Color Label\";\n            newText.color = buttonColor;\n            newText.fontSize = labelTextSize;\n            pickerSwatches.addControl(newText, 1, 0);\n\n            newSwatch = new Rectangle();\n            newSwatch.name = \"New Color Swatch\";\n            newSwatch.background = options.lastColor;\n            newSwatch.thickness = 0;\n            activeSwatches.addControl(newSwatch, 0, 0);\n\n            var currentSwatch: Button = Button.CreateSimpleButton(\"currentSwatch\", \"\");\n            currentSwatch.background = options.lastColor;\n            currentSwatch.thickness = 0;\n            currentSwatch.onPointerClickObservable.add(() => {\n                var revertColor = Color3.FromHexString(currentSwatch.background);\n                updateValues(revertColor, currentSwatch.name!);\n                editSwatches(false);\n            });\n            currentSwatch.pointerDownAnimation = () => { };\n            currentSwatch.pointerUpAnimation = () => { };\n            currentSwatch.pointerEnterAnimation = () => { };\n            currentSwatch.pointerOutAnimation = () => { };\n            activeSwatches.addControl(currentSwatch, 1, 0);\n\n            var swatchOutline: Rectangle = new Rectangle();\n            swatchOutline.name = \"Swatch Outline\";\n            swatchOutline.width = 0.67;\n            swatchOutline.thickness = 2;\n            swatchOutline.color = currentSwatchesOutlineColor;\n            swatchOutline.isHitTestVisible = false;\n            pickerSwatches.addControl(swatchOutline, 2, 0);\n\n            var currentText: TextBlock = new TextBlock();\n            currentText.name = \"Current Color Label\";\n            currentText.text = \"current\";\n            currentText.color = buttonColor;\n            currentText.fontSize = labelTextSize;\n            pickerSwatches.addControl(currentText, 3, 0);\n\n            // Buttons grid\n            var buttonGrid: Grid = new Grid();\n            buttonGrid.name = \"Button Grid\";\n            buttonGrid.height = 0.8;\n            var buttonGridRows: number = 1 / 3;\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            pickerSwatchesButtons.addControl(buttonGrid, 0, 1);\n\n            // Determine pixel width and height for all buttons from overall panel dimensions\n            buttonWidth = (Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[1] * 0.67)).toString() + \"px\";\n            buttonHeight = (Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * (parseFloat(buttonGrid.height.toString()) / 100) * buttonGridRows * 0.7)).toString() + \"px\";\n\n            // Determine button type size\n            if (parseFloat(buttonWidth) > parseFloat(buttonHeight)) {\n                buttonFontSize = Math.floor(parseFloat(buttonHeight) * 0.45);\n            }\n            else {\n                buttonFontSize = Math.floor(parseFloat(buttonWidth) * 0.11);\n            }\n\n            // Panel Buttons\n            var butOK: Button = Button.CreateSimpleButton(\"butOK\", \"OK\");\n            butOK.width = buttonWidth;\n            butOK.height = buttonHeight;\n            butOK.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            butOK.thickness = 2;\n            butOK.color = buttonColor;\n            butOK.fontSize = buttonFontSize;\n            butOK.background = buttonBackgroundColor;\n            butOK.onPointerEnterObservable.add(() => { butOK.background = buttonBackgroundHoverColor; });\n            butOK.onPointerOutObservable.add(() => { butOK.background = buttonBackgroundColor; });\n            butOK.pointerDownAnimation = () => {\n                butOK.background = buttonBackgroundClickColor;\n            };\n            butOK.pointerUpAnimation = () => {\n                butOK.background = buttonBackgroundHoverColor;\n            };\n            butOK.onPointerClickObservable.add(() => {\n                editSwatches(false);\n                closePicker(newSwatch.background);\n            });\n            buttonGrid.addControl(butOK, 0, 0);\n\n            var butCancel: Button = Button.CreateSimpleButton(\"butCancel\", \"Cancel\");\n            butCancel.width = buttonWidth;\n            butCancel.height = buttonHeight;\n            butCancel.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            butCancel.thickness = 2;\n            butCancel.color = buttonColor;\n            butCancel.fontSize = buttonFontSize;\n            butCancel.background = buttonBackgroundColor;\n            butCancel.onPointerEnterObservable.add(() => { butCancel.background = buttonBackgroundHoverColor; });\n            butCancel.onPointerOutObservable.add(() => { butCancel.background = buttonBackgroundColor; });\n            butCancel.pointerDownAnimation = () => {\n                butCancel.background = buttonBackgroundClickColor;\n            };\n            butCancel.pointerUpAnimation = () => {\n                butCancel.background = buttonBackgroundHoverColor;\n            };\n            butCancel.onPointerClickObservable.add(() => {\n                editSwatches(false);\n                closePicker(currentSwatch.background);\n            });\n            buttonGrid.addControl(butCancel, 1, 0);\n\n            if (options.savedColors) {\n                var butSave: Button = Button.CreateSimpleButton(\"butSave\", \"Save\");\n                butSave.width = buttonWidth;\n                butSave.height = buttonHeight;\n                butSave.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n                butSave.thickness = 2;\n                butSave.fontSize = buttonFontSize;\n                if (options.savedColors.length < options.swatchLimit!) {\n                    butSave.color = buttonColor;\n                    butSave.background = buttonBackgroundColor;\n                }\n                else {\n                    disableButton(butSave, true);\n                }\n                butSave.onPointerEnterObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundHoverColor;\n                        }\n                    }\n                });\n                butSave.onPointerOutObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundColor;\n                        }\n                    }\n                });\n                butSave.pointerDownAnimation = () => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundClickColor;\n                        }\n                    }\n                };\n                butSave.pointerUpAnimation = () => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundHoverColor;\n                        }\n                    }\n                };\n                butSave.onPointerClickObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length == 0) {\n                            setEditButtonVisibility(true);\n                        }\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            updateSwatches(newSwatch.background, butSave);\n                        }\n                        editSwatches(false);\n                    }\n                });\n                if (options.savedColors.length > 0) {\n                    setEditButtonVisibility(true);\n                }\n                buttonGrid.addControl(butSave, 2, 0);\n            }\n\n            // Picker color values input\n            var pickerColorValues: Grid = new Grid();\n            pickerColorValues.name = \"Dialog Lower Right\";\n            pickerColorValues.addRowDefinition(0.02, false);\n            pickerColorValues.addRowDefinition(0.63, false);\n            pickerColorValues.addRowDefinition(0.21, false);\n            pickerColorValues.addRowDefinition(0.14, false);\n            pickerBodyRight.addControl(pickerColorValues, 1, 0);\n\n            // RGB values text boxes\n            currentColor = Color3.FromHexString(options.lastColor);\n            var rgbValuesQuadrant: Grid = new Grid();\n            rgbValuesQuadrant.name = \"RGB Values\";\n            rgbValuesQuadrant.width = 0.82;\n            rgbValuesQuadrant.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addColumnDefinition(0.1, false);\n            rgbValuesQuadrant.addColumnDefinition(0.2, false);\n            rgbValuesQuadrant.addColumnDefinition(0.7, false);\n            pickerColorValues.addControl(rgbValuesQuadrant, 1, 0);\n\n            for (var i = 0; i < inputFieldLabels.length; i++) {\n                var labelText: TextBlock = new TextBlock();\n                labelText.text = inputFieldLabels[i];\n                labelText.color = buttonColor;\n                labelText.fontSize = buttonFontSize;\n                rgbValuesQuadrant.addControl(labelText, i, 0);\n            }\n\n            // Input fields for RGB values\n            rValInt = new InputText();\n            rValInt.width = 0.83;\n            rValInt.height = 0.72;\n            rValInt.name = \"rIntField\";\n            rValInt.fontSize = buttonFontSize;\n            rValInt.text = (currentColor.r * 255).toString();\n            rValInt.color = inputTextColor;\n            rValInt.background = inputTextBackgroundColor;\n            rValInt.onFocusObservable.add(() => {\n                activeField = rValInt.name!;\n                lastVal = rValInt.text;\n                editSwatches(false);\n            });\n            rValInt.onBlurObservable.add(() => {\n                if (rValInt.text == \"\") {\n                    rValInt.text = \"0\";\n                }\n                updateInt(rValInt, \"r\");\n                if (activeField == rValInt.name) {\n                    activeField = \"\";\n                }\n            });\n            rValInt.onTextChangedObservable.add(() => {\n                if (activeField == rValInt.name) {\n                    updateInt(rValInt, \"r\");\n                }\n            });\n            rgbValuesQuadrant.addControl(rValInt, 0, 1);\n\n            gValInt = new InputText();\n            gValInt.width = 0.83;\n            gValInt.height = 0.72;\n            gValInt.name = \"gIntField\";\n            gValInt.fontSize = buttonFontSize;\n            gValInt.text = (currentColor.g * 255).toString();\n            gValInt.color = inputTextColor;\n            gValInt.background = inputTextBackgroundColor;\n            gValInt.onFocusObservable.add(() => {\n                activeField = gValInt.name!;\n                lastVal = gValInt.text;\n                editSwatches(false);\n            });\n            gValInt.onBlurObservable.add(() => {\n                if (gValInt.text == \"\") {\n                    gValInt.text = \"0\";\n                }\n                updateInt(gValInt, \"g\");\n                if (activeField == gValInt.name) {\n                    activeField = \"\";\n                }\n            });\n            gValInt.onTextChangedObservable.add(() => {\n                if (activeField == gValInt.name) {\n                    updateInt(gValInt, \"g\");\n                }\n            });\n            rgbValuesQuadrant.addControl(gValInt, 1, 1);\n\n            bValInt = new InputText();\n            bValInt.width = 0.83;\n            bValInt.height = 0.72;\n            bValInt.name = \"bIntField\";\n            bValInt.fontSize = buttonFontSize;\n            bValInt.text = (currentColor.b * 255).toString();\n            bValInt.color = inputTextColor;\n            bValInt.background = inputTextBackgroundColor;\n            bValInt.onFocusObservable.add(() => {\n                activeField = bValInt.name!;\n                lastVal = bValInt.text;\n                editSwatches(false);\n            });\n            bValInt.onBlurObservable.add(() => {\n                if (bValInt.text == \"\") {\n                    bValInt.text = \"0\";\n                }\n                updateInt(bValInt, \"b\");\n                if (activeField == bValInt.name) {\n                    activeField = \"\";\n                }\n            });\n            bValInt.onTextChangedObservable.add(() => {\n                if (activeField == bValInt.name) {\n                    updateInt(bValInt, \"b\");\n                }\n            });\n            rgbValuesQuadrant.addControl(bValInt, 2, 1);\n\n            rValDec = new InputText();\n            rValDec.width = 0.95;\n            rValDec.height = 0.72;\n            rValDec.name = \"rDecField\";\n            rValDec.fontSize = buttonFontSize;\n            rValDec.text = currentColor.r.toString();\n            rValDec.color = inputTextColor;\n            rValDec.background = inputTextBackgroundColor;\n            rValDec.onFocusObservable.add(() => {\n                activeField = rValDec.name!;\n                lastVal = rValDec.text;\n                editSwatches(false);\n            });\n            rValDec.onBlurObservable.add(() => {\n                if (parseFloat(rValDec.text) == 0 || rValDec.text == \"\") {\n                    rValDec.text = \"0\";\n                    updateFloat(rValDec, \"r\");\n                }\n                if (activeField == rValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            rValDec.onTextChangedObservable.add(() => {\n                if (activeField == rValDec.name) {\n                    updateFloat(rValDec, \"r\");\n                }\n            });\n            rgbValuesQuadrant.addControl(rValDec, 0, 2);\n\n            gValDec = new InputText();\n            gValDec.width = 0.95;\n            gValDec.height = 0.72;\n            gValDec.name = \"gDecField\";\n            gValDec.fontSize = buttonFontSize;\n            gValDec.text = currentColor.g.toString();\n            gValDec.color = inputTextColor;\n            gValDec.background = inputTextBackgroundColor;\n            gValDec.onFocusObservable.add(() => {\n                activeField = gValDec.name!;\n                lastVal = gValDec.text;\n                editSwatches(false);\n            });\n            gValDec.onBlurObservable.add(() => {\n                if (parseFloat(gValDec.text) == 0 || gValDec.text == \"\") {\n                    gValDec.text = \"0\";\n                    updateFloat(gValDec, \"g\");\n                }\n                if (activeField == gValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            gValDec.onTextChangedObservable.add(() => {\n                if (activeField == gValDec.name) {\n                    updateFloat(gValDec, \"g\");\n                }\n            });\n            rgbValuesQuadrant.addControl(gValDec, 1, 2);\n\n            bValDec = new InputText();\n            bValDec.width = 0.95;\n            bValDec.height = 0.72;\n            bValDec.name = \"bDecField\";\n            bValDec.fontSize = buttonFontSize;\n            bValDec.text = currentColor.b.toString();\n            bValDec.color = inputTextColor;\n            bValDec.background = inputTextBackgroundColor;\n            bValDec.onFocusObservable.add(() => {\n                activeField = bValDec.name!;\n                lastVal = bValDec.text;\n                editSwatches(false);\n            });\n            bValDec.onBlurObservable.add(() => {\n                if (parseFloat(bValDec.text) == 0 || bValDec.text == \"\") {\n                    bValDec.text = \"0\";\n                    updateFloat(bValDec, \"b\");\n                }\n                if (activeField == bValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            bValDec.onTextChangedObservable.add(() => {\n                if (activeField == bValDec.name) {\n                    updateFloat(bValDec, \"b\");\n                }\n            });\n            rgbValuesQuadrant.addControl(bValDec, 2, 2);\n\n            // Hex value input\n            var hexValueQuadrant: Grid = new Grid();\n            hexValueQuadrant.name = \"Hex Value\";\n            hexValueQuadrant.width = 0.82;\n            hexValueQuadrant.addRowDefinition(1.0, false);\n            hexValueQuadrant.addColumnDefinition(0.1, false);\n            hexValueQuadrant.addColumnDefinition(0.9, false);\n            pickerColorValues.addControl(hexValueQuadrant, 2, 0);\n\n            var labelText: TextBlock = new TextBlock();\n            labelText.text = \"#\";\n            labelText.color = buttonColor;\n            labelText.fontSize = buttonFontSize;\n            hexValueQuadrant.addControl(labelText, 0, 0);\n\n            hexVal = new InputText();\n            hexVal.width = 0.96;\n            hexVal.height = 0.72;\n            hexVal.name = \"hexField\";\n            hexVal.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n            hexVal.fontSize = buttonFontSize;\n            var minusPound = options.lastColor.split(\"#\");\n            hexVal.text = minusPound[1];\n            hexVal.color = inputTextColor;\n            hexVal.background = inputTextBackgroundColor;\n            hexVal.onFocusObservable.add(() => {\n                activeField = hexVal.name!;\n                lastVal = hexVal.text;\n                editSwatches(false);\n            });\n            hexVal.onBlurObservable.add(() => {\n                if (hexVal.text.length == 3) {\n                    var val = hexVal.text.split(\"\");\n                    hexVal.text = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\n                }\n                if (hexVal.text == \"\") {\n                    hexVal.text = \"000000\";\n                    updateValues(Color3.FromHexString(hexVal.text), \"b\");\n                }\n                if (activeField == hexVal.name) {\n                    activeField = \"\";\n                }\n            });\n            hexVal.onTextChangedObservable.add(() => {\n                var newHexValue: string = hexVal.text;\n                var checkHex: boolean = /[^0-9A-F]/i.test(newHexValue);\n                if ((hexVal.text.length > 6 || checkHex) && activeField == hexVal.name) {\n                    hexVal.text = lastVal;\n                }\n                else {\n                    if (hexVal.text.length < 6) {\n                        var leadingZero: Number = 6 - hexVal.text.length;\n                        for (var i = 0; i < leadingZero; i++) {\n                            newHexValue = \"0\" + newHexValue;\n                        }\n                    }\n                    if (hexVal.text.length == 3) {\n                        var val: string[] = hexVal.text.split(\"\");\n                        newHexValue = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\n                    }\n                    newHexValue = \"#\" + newHexValue;\n                    if (activeField == hexVal.name) {\n                        lastVal = hexVal.text;\n                        updateValues(Color3.FromHexString(newHexValue), hexVal.name);\n                    }\n                }\n            });\n            hexValueQuadrant.addControl(hexVal, 0, 1);\n\n            if (options.savedColors && options.savedColors.length > 0) {\n                updateSwatches(\"\", butSave!);\n            }\n        });\n    }\n}\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.ColorPicker\"] = ColorPicker;", "import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Ellipse\"] = Ellipse;", "import { InputText } from \"./inputText\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { TextWrapper } from './textWrapper';\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(textWrapper: TextWrapper): TextWrapper {\r\n        const pwdTextWrapper = new TextWrapper();\r\n        let txt = \"\";\r\n        for (let i = 0; i < textWrapper.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        pwdTextWrapper.text = txt;\r\n        return pwdTextWrapper;\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.InputPassword\"] = InputPassword;", "import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector3, Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Measure } from \"../measure\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._cachedParentMeasure.left + this._x1.getValue(this._host), this._cachedParentMeasure.top + this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._cachedParentMeasure.left + this._effectiveX2, this._cachedParentMeasure.top + this._effectiveY2);\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = parentMeasure.left + Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = parentMeasure.top + Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Line\"] = Line;\r\n", "import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Epsilon } from '@babylonjs/core/Maths/math.constants';\r\nimport { Camera } from \"@babylonjs/core/Cameras/camera\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\n\r\nimport { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector3;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector3(0, 0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector with Z component\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector3 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector3 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPositionWithZ(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector3(this._control.centerX, this._control.centerY, 1. - Epsilon);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector3(xValue, yValue, 1. - Epsilon);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n", "import { Nullable } from \"@babylonjs/core/types\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Measure } from \"../measure\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n\r\n        var first: boolean = true; //first index is not necessarily 0\r\n        var previousPoint: Vector3;\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            if (first) {\r\n                context.moveTo(point._point.x, point._point.y);\r\n\r\n                first = false;\r\n            }\r\n            else {\r\n                if (point._point.z < 1 && previousPoint.z < 1) {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                } else {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n                }\r\n            }\r\n            previousPoint = point._point;\r\n        });\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.MultiLine\"] = MultiLine;\r\n", "import { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { PointerInfoBase } from '@babylonjs/core/Events/pointerEvents';\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Outer\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fill();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.stroke();\r\n\r\n        // Inner\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.RadioButton\"] = RadioButton;", "import { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nimport { Control } from \"../control\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { PointerInfoBase } from '@babylonjs/core/Events/pointerEvents';\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n    private _step = 0;\r\n\r\n    private _lastPointerDownID = -1;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a step to apply to values (0 by default) */\r\n    public get step(): number {\r\n        return this._step;\r\n    }\r\n\r\n    public set step(value: number) {\r\n        if (this._step === value) {\r\n            return;\r\n        }\r\n\r\n        this._step = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        let value: number;\r\n        if (this._isVertical) {\r\n            value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n\r\n        const mult = (1 / this._step) | 0;\r\n        this.value = this._step ? ((value * mult) | 0) / mult : value;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._lastPointerDownID = pointerId;\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\r\n        if (pointerId != this._lastPointerDownID) {\r\n            return;\r\n        }\r\n\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    public _onCanvasBlur(): void {\r\n        this._forcePointerUp();\r\n        super._onCanvasBlur();\r\n    }\r\n\r\n}\r\n", "import { BaseSlider } from \"./baseSlider\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { Nullable } from '@babylonjs/core/types';\r\nimport { Measure } from '../../measure';\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _thumbColor = \"\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets thumb's color */\r\n    public get thumbColor(): string {\r\n        return this._thumbColor;\r\n    }\r\n\r\n    public set thumbColor(value: string) {\r\n        if (this._thumbColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        var radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += (this._effectiveThumbThickness / 2);\r\n            }\r\n            else {\r\n                left += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        }\r\n        else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n        else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        context.fillStyle = this._thumbColor || this.color;\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.Slider\"] = Slider;", "import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see https://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets the (stack) panel of the SelectionPanel  */\r\n    public get panel(): StackPanel {\r\n        return this._panel;\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}", "import { Measure } from \"../../measure\";\r\nimport { Container } from \"../container\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Control } from \"../control\";\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n * @hidden\r\n*/\r\nexport class _ScrollViewerWindow extends Container {\r\n    public parentClientWidth: number;\r\n    public parentClientHeight: number;\r\n\r\n    private _freezeControls = false;\r\n    private _parentMeasure: Measure;\r\n    private _oldLeft: number | null;\r\n    private _oldTop: number | null;\r\n\r\n    public get freezeControls(): boolean {\r\n        return this._freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        if (this._freezeControls === value) {\r\n            return;\r\n        }\r\n\r\n        if (!value) {\r\n            this._restoreMeasures();\r\n        }\r\n\r\n        // trigger a full normal layout calculation to be sure all children have their measures up to date\r\n        this._freezeControls = false;\r\n\r\n        var textureSize = this.host.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        var context = this.host.getContext();\r\n\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n\r\n        this.host._numLayoutCalls = 0;\r\n\r\n        this.host._rootContainer._layout(measure, context);\r\n\r\n        // in freeze mode, prepare children measures accordingly\r\n        if (value) {\r\n            this._updateMeasures();\r\n            if (this._useBuckets()) {\r\n                this._makeBuckets();\r\n            }\r\n        }\r\n\r\n        this._freezeControls = value;\r\n\r\n        this.host.markAsDirty(); // redraw with the (new) current settings\r\n    }\r\n\r\n    private _bucketWidth: number = 0;\r\n    private _bucketHeight: number = 0;\r\n    private _buckets: { [key: number]: Array<Control> } = {};\r\n    private _bucketLen: number;\r\n\r\n    public get bucketWidth(): number {\r\n        return this._bucketWidth;\r\n    }\r\n\r\n    public get bucketHeight(): number {\r\n        return this._bucketHeight;\r\n    }\r\n\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._bucketWidth = width;\r\n        this._bucketHeight = height;\r\n\r\n        if (this._useBuckets()) {\r\n            if (this._freezeControls) {\r\n                this._makeBuckets();\r\n            }\r\n        } else {\r\n            this._buckets = {};\r\n        }\r\n    }\r\n\r\n    private _useBuckets(): boolean {\r\n        return this._bucketWidth > 0 && this._bucketHeight > 0;\r\n    }\r\n\r\n    private _makeBuckets(): void {\r\n        this._buckets = {};\r\n        this._bucketLen = Math.ceil(this.widthInPixels / this._bucketWidth);\r\n        this._dispatchInBuckets(this._children);\r\n        this._oldLeft = null;\r\n        this._oldTop = null;\r\n    }\r\n\r\n    private _dispatchInBuckets(children: Control[]): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            let child = children[i];\r\n\r\n            let bStartX = Math.max(0, Math.floor((child._customData._origLeft - this._customData.origLeft) / this._bucketWidth)),\r\n                bEndX = Math.floor((child._customData._origLeft - this._customData.origLeft + child._currentMeasure.width - 1) / this._bucketWidth),\r\n                bStartY = Math.max(0, Math.floor((child._customData._origTop - this._customData.origTop) / this._bucketHeight)),\r\n                bEndY = Math.floor((child._customData._origTop - this._customData.origTop + child._currentMeasure.height - 1) / this._bucketHeight);\r\n\r\n            while (bStartY <= bEndY) {\r\n                for (let x = bStartX; x <= bEndX; ++x) {\r\n                    let bucket = bStartY * this._bucketLen + x,\r\n                        lstc = this._buckets[bucket];\r\n\r\n                    if (!lstc) {\r\n                        lstc = [];\r\n                        this._buckets[bucket] = lstc;\r\n                    }\r\n\r\n                    lstc.push(child);\r\n                }\r\n                bStartY++;\r\n            }\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._dispatchInBuckets(child._children);\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset left and top measures for the window and all its children\r\n    private _updateMeasures(): void {\r\n        let left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        this._measureForChildren.left -= left;\r\n        this._measureForChildren.top -= top;\r\n        this._currentMeasure.left -= left;\r\n        this._currentMeasure.top -= top;\r\n\r\n        this._customData.origLeftForChildren = this._measureForChildren.left;\r\n        this._customData.origTopForChildren = this._measureForChildren.top;\r\n        this._customData.origLeft = this._currentMeasure.left;\r\n        this._customData.origTop = this._currentMeasure.top;\r\n\r\n        this._updateChildrenMeasures(this._children, left, top);\r\n    }\r\n\r\n    private _updateChildrenMeasures(children: Control[], left: number, top: number): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            let child = children[i];\r\n\r\n            child._currentMeasure.left -= left;\r\n            child._currentMeasure.top -= top;\r\n\r\n            child._customData._origLeft = child._currentMeasure.left; // save the original left and top values for each child\r\n            child._customData._origTop = child._currentMeasure.top;\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._updateChildrenMeasures(child._children, left, top);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _restoreMeasures(): void {\r\n        let left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        this._measureForChildren.left = this._customData.origLeftForChildren + left;\r\n        this._measureForChildren.top = this._customData.origTopForChildren + top;\r\n        this._currentMeasure.left = this._customData.origLeft + left;\r\n        this._currentMeasure.top = this._customData.origTop + top;\r\n    }\r\n\r\n    /**\r\n    * Creates a new ScrollViewerWindow\r\n    * @param name of ScrollViewerWindow\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewerWindow\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._parentMeasure = parentMeasure;\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        this._measureForChildren.width = parentMeasure.width;\r\n        this._measureForChildren.height = parentMeasure.height;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._freezeControls) {\r\n            this.invalidateRect(); // will trigger a redraw of the window\r\n            return false;\r\n        }\r\n\r\n        return super._layout(parentMeasure, context);\r\n    }\r\n\r\n    private _scrollChildren(children: Control[], left: number, top: number): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            let child = children[i];\r\n\r\n            child._currentMeasure.left = child._customData._origLeft + left;\r\n            child._currentMeasure.top = child._customData._origTop + top;\r\n            child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._scrollChildren(child._children, left, top);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _scrollChildrenWithBuckets(left: number, top: number, scrollLeft: number, scrollTop: number): void {\r\n        let bStartX = Math.max(0, Math.floor(-left / this._bucketWidth)),\r\n            bEndX = Math.floor((-left + this._parentMeasure.width - 1) / this._bucketWidth),\r\n            bStartY = Math.max(0, Math.floor(-top / this._bucketHeight)),\r\n            bEndY = Math.floor((-top + this._parentMeasure.height - 1) / this._bucketHeight);\r\n\r\n        while (bStartY <= bEndY) {\r\n            for (let x = bStartX; x <= bEndX; ++x) {\r\n                let bucket = bStartY * this._bucketLen + x,\r\n                    lstc = this._buckets[bucket];\r\n\r\n                if (lstc) {\r\n                    for (let i = 0; i < lstc.length; ++i) {\r\n                        let child = lstc[i];\r\n                        child._currentMeasure.left = child._customData._origLeft + scrollLeft;\r\n                        child._currentMeasure.top = child._customData._origTop + scrollTop;\r\n                        child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\r\n                    }\r\n                }\r\n            }\r\n            bStartY++;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Measure): void {\r\n        if (!this._freezeControls) {\r\n            super._draw(context, invalidatedRectangle);\r\n            return;\r\n        }\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        let left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        if (this._useBuckets()) {\r\n            if (this._oldLeft !== null && this._oldTop !== null) {\r\n                this._scrollChildrenWithBuckets(this._oldLeft, this._oldTop, left, top);\r\n                this._scrollChildrenWithBuckets(left, top, left, top);\r\n            } else {\r\n                this._scrollChildren(this._children, left, top);\r\n            }\r\n        } else {\r\n            this._scrollChildren(this._children, left, top);\r\n        }\r\n\r\n        this._oldLeft = left;\r\n        this._oldTop = top;\r\n\r\n        for (var child of this._children) {\r\n            if (!child._intersectsRect(this._parentMeasure)) {\r\n                continue;\r\n            }\r\n            child._render(context, this._parentMeasure);\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        if (this._freezeControls) {\r\n            super._postMeasure();\r\n            return;\r\n        }\r\n\r\n        var maxWidth = this.parentClientWidth;\r\n        var maxHeight = this.parentClientHeight;\r\n        for (var child of this.children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\r\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\r\n            }\r\n\r\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\r\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width + child.paddingRightInPixels);\r\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height + child.paddingBottomInPixels);\r\n        }\r\n\r\n        if (this._currentMeasure.width !== maxWidth) {\r\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.width = maxWidth;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        if (this._currentMeasure.height !== maxHeight) {\r\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.height = maxHeight;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n}", "import { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport { Control } from \"../control\";\r\nimport { Measure } from \"../../measure\";\r\nimport { PointerInfoBase } from '@babylonjs/core/Events/pointerEvents';\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        var thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        }\r\n        else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        var left = this._renderLeft;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.left = left - this._effectiveBarOffset;\r\n            this._tempMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._tempMeasure.width = this._currentMeasure.width;\r\n            this._tempMeasure.height = this._effectiveThumbThickness;\r\n        }\r\n        else {\r\n            this._tempMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._tempMeasure.top = this._currentMeasure.top;\r\n            this._tempMeasure.width = this._effectiveThumbThickness;\r\n            this._tempMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._tempMeasure.left, this._tempMeasure.top, this._tempMeasure.width, this._tempMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (x < this._tempMeasure.left || x > this._tempMeasure.left + this._tempMeasure.width || y < this._tempMeasure.top || y > this._tempMeasure.top + this._tempMeasure.height) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this.maximum - this.minimum);\r\n                }\r\n                else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        }\r\n        else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n}\r\n", "import { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport { Control } from \"../control\";\r\nimport { Image } from \"../image\";\r\nimport { Measure } from \"../../measure\";\r\nimport { PointerInfoBase } from '@babylonjs/core/Events/pointerEvents';\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ImageScrollBar extends BaseSlider {\r\n    private _backgroundBaseImage: Image;\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _thumbBaseImage: Image;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /** Number of 90\u00B0 rotation to apply on the images when in vertical mode */\r\n    public num90RotationInVerticalMode = 1;\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background for horizontal bar\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundBaseImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    const rotatedValue = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                    this._backgroundImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._backgroundImage = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        }\r\n        else {\r\n            this._backgroundImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbBaseImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    var rotatedValue = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                    this._thumbImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._thumbImage = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        }\r\n        else {\r\n            this._thumbImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the length of the thumb\r\n     */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbLength = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the thumb\r\n     */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the bar image\r\n     */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImageHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageScrollBar\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageScrollBar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        var thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        }\r\n        else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left + width * (1 - this._barImageHeight) * 0.5, this._currentMeasure.top, width * this._barImageHeight, height);\r\n                this._tempMeasure.height += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            }\r\n            else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left, top + height * (1 - this._barImageHeight) * 0.5, width, height * this._barImageHeight);\r\n                this._tempMeasure.width += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            }\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset + this._currentMeasure.width * (1 - this._thumbHeight) * 0.5, this._currentMeasure.top + thumbPosition, this._currentMeasure.width * this._thumbHeight, this._effectiveThumbThickness);\r\n        }\r\n        else {\r\n            this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top + this._currentMeasure.height * (1 - this._thumbHeight) * 0.5, this._effectiveThumbThickness, this._currentMeasure.height * this._thumbHeight);\r\n        }\r\n\r\n        if (this._thumbImage) {\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (x < this._tempMeasure.left || x > this._tempMeasure.left + this._tempMeasure.width || y < this._tempMeasure.top || y > this._tempMeasure.top + this._tempMeasure.height) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this.maximum - this.minimum);\r\n                }\r\n                else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        }\r\n        else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n}\r\n", "import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector2 } from \"@babylonjs/core/Maths/math\";\r\nimport { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport { Image } from \"../image\";\r\nimport { Control } from \"../control\";\r\nimport { Container } from \"../container\";\r\nimport { Measure } from \"../../measure\";\r\nimport { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\nimport { ImageScrollBar } from \"../sliders/imageScrollBar\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n*/\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar | ImageScrollBar;\r\n    private _verticalBar: ScrollBar | ImageScrollBar;\r\n    private _barColor: string;\r\n    private _barBackground: string;\r\n    private _barImage: Image;\r\n    private _horizontalBarImage: Image;\r\n    private _verticalBarImage: Image;\r\n    private _barBackgroundImage: Image;\r\n    private _horizontalBarBackgroundImage: Image;\r\n    private _verticalBarBackgroundImage: Image;\r\n    private _barSize: number = 20;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onWheelObserver: Nullable<Observer<Vector2>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n    private _useImageBar: Boolean;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _horizontalBarImageHeight: number = 1;\r\n    private _verticalBarImageHeight: number = 1;\r\n    private _oldWindowContentsWidth: number = 0;\r\n    private _oldWindowContentsHeight: number = 0;\r\n\r\n    /**\r\n     * Gets the horizontal scrollbar\r\n     */\r\n    public get horizontalBar(): ScrollBar | ImageScrollBar {\r\n        return this._horizontalBar;\r\n    }\r\n\r\n    /**\r\n     * Gets the vertical scrollbar\r\n     */\r\n    public get verticalBar(): ScrollBar | ImageScrollBar {\r\n        return this._verticalBar;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Freezes or unfreezes the controls in the window.\r\n     * When controls are frozen, the scroll viewer can render a lot more quickly but updates to positions/sizes of controls\r\n     * are not taken into account. If you want to change positions/sizes, unfreeze, perform the changes then freeze again\r\n     */\r\n    public get freezeControls(): boolean {\r\n        return this._window.freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        this._window.freezeControls = value;\r\n    }\r\n\r\n    /** Gets the bucket width */\r\n    public get bucketWidth(): number {\r\n        return this._window.bucketWidth;\r\n    }\r\n\r\n    /** Gets the bucket height */\r\n    public get bucketHeight(): number {\r\n        return this._window.bucketHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets the bucket sizes.\r\n     * When freezeControls is true, setting a non-zero bucket size will improve performances by updating only\r\n     * controls that are visible. The bucket sizes is used to subdivide (internally) the window area to smaller areas into which\r\n     * controls are dispatched. So, the size should be roughly equals to the mean size of all the controls of\r\n     * the window. To disable the usage of buckets, sets either width or height (or both) to 0.\r\n     * Please note that using this option will raise the memory usage (the higher the bucket sizes, the less memory\r\n     * used), that's why it is not enabled by default.\r\n     * @param width width of the bucket\r\n     * @param height height of the bucket\r\n     */\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._window.setBucketSizes(width, height);\r\n    }\r\n\r\n    private _forceHorizontalBar: boolean = false;\r\n    private _forceVerticalBar: boolean = false;\r\n\r\n    /**\r\n     * Forces the horizontal scroll bar to be displayed\r\n     */\r\n    public get forceHorizontalBar(): boolean {\r\n        return this._forceHorizontalBar;\r\n    }\r\n\r\n    public set forceHorizontalBar(value: boolean) {\r\n        this._grid.setRowDefinition(1, value ? this._barSize : 0, true);\r\n        this._horizontalBar.isVisible = value;\r\n        this._forceHorizontalBar = value;\r\n    }\r\n\r\n    /**\r\n     * Forces the vertical scroll bar to be displayed\r\n     */\r\n    public get forceVerticalBar(): boolean {\r\n        return this._forceVerticalBar;\r\n    }\r\n\r\n    public set forceVerticalBar(value: boolean) {\r\n        this._grid.setColumnDefinition(1, value ? this._barSize : 0, true);\r\n        this._verticalBar.isVisible = value;\r\n        this._forceVerticalBar = value;\r\n    }\r\n\r\n    /**\r\n    * Creates a new ScrollViewer\r\n    * @param name of ScrollViewer\r\n    */\r\n    constructor(name?: string, isImageBased?: boolean) {\r\n        super(name);\r\n\r\n        this._useImageBar = isImageBased ? isImageBased : false;\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        if (this._useImageBar) {\r\n            this._horizontalBar = new ImageScrollBar();\r\n            this._verticalBar = new ImageScrollBar();\r\n        }\r\n        else {\r\n            this._horizontalBar = new ScrollBar();\r\n            this._verticalBar = new ScrollBar();\r\n        }\r\n\r\n        this._window = new _ScrollViewerWindow(\"scrollViewer_window\");\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._addBar(this._verticalBar, this._verticalBarSpace, true, Math.PI);\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._addBar(this._horizontalBar, this._horizontalBarSpace, false, 0);\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        // Colors\r\n        if (!this._useImageBar) {\r\n            this.barColor = \"grey\";\r\n            this.barBackground = \"transparent\";\r\n        }\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        let ratio = this.host.idealRatio;\r\n\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible || this.forceVerticalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible || this.forceHorizontalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n\r\n        this._setWindowPosition(false);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the scroll bar container background color */\r\n    public get scrollBackground(): string {\r\n        return this._horizontalBarSpace.background;\r\n    }\r\n\r\n    public set scrollBackground(color: string) {\r\n        if (this._horizontalBarSpace.background === color) {\r\n            return;\r\n        }\r\n        this._horizontalBarSpace.background = color;\r\n        this._verticalBarSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the bar image */\r\n    public get thumbImage(): Image {\r\n        return this._barImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._barImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImage = value;\r\n        let hb = <ImageScrollBar>this._horizontalBar;\r\n        let vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbImage = value;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar image */\r\n    public get horizontalThumbImage(): Image {\r\n        return this._horizontalBarImage;\r\n    }\r\n\r\n    public set horizontalThumbImage(value: Image) {\r\n        if (this._horizontalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalBarImage = value;\r\n        let hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar image */\r\n    public get verticalThumbImage(): Image {\r\n        return this._verticalBarImage;\r\n    }\r\n\r\n    public set verticalThumbImage(value: Image) {\r\n        if (this._verticalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalBarImage = value;\r\n        let vb = <ImageScrollBar>this._verticalBar;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the length of the thumb */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbLength = value;\r\n        var hb = <ImageScrollBar>this._horizontalBar;\r\n        var vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbLength = value;\r\n        vb.thumbLength = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the thumb */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbHeight = value;\r\n        var hb = <ImageScrollBar>this._horizontalBar;\r\n        var vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbHeight = value;\r\n        vb.thumbHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the bar image */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._barImageHeight = value;\r\n        var hb = <ImageScrollBar>this._horizontalBar;\r\n        var vb = <ImageScrollBar>this._verticalBar;\r\n        hb.barImageHeight = value;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the horizontal bar image */\r\n    public get horizontalBarImageHeight(): number {\r\n        return this._horizontalBarImageHeight;\r\n    }\r\n\r\n    public set horizontalBarImageHeight(value: number) {\r\n        if (this._horizontalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._horizontalBarImageHeight = value;\r\n        var hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the vertical bar image */\r\n    public get verticalBarImageHeight(): number {\r\n        return this._verticalBarImageHeight;\r\n    }\r\n\r\n    public set verticalBarImageHeight(value: number) {\r\n        if (this._verticalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._verticalBarImageHeight = value;\r\n        var vb = <ImageScrollBar>this._verticalBar;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        let hb = <ScrollBar>this._horizontalBar;\r\n        let vb = <ScrollBar>this._verticalBar;\r\n        hb.background = color;\r\n        vb.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar background image */\r\n    public get barImage(): Image {\r\n        return this._barBackgroundImage;\r\n    }\r\n\r\n    public set barImage(value: Image) {\r\n        if (this._barBackgroundImage === value) {\r\n        }\r\n\r\n        this._barBackgroundImage = value;\r\n        let hb = <ImageScrollBar>this._horizontalBar;\r\n        let vb = <ImageScrollBar>this._verticalBar;\r\n        hb.backgroundImage = value;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar background image */\r\n    public get horizontalBarImage(): Image {\r\n        return this._horizontalBarBackgroundImage;\r\n    }\r\n\r\n    public set horizontalBarImage(value: Image) {\r\n        if (this._horizontalBarBackgroundImage === value) {\r\n        }\r\n\r\n        this._horizontalBarBackgroundImage = value;\r\n        let hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar background image */\r\n    public get verticalBarImage(): Image {\r\n        return this._verticalBarBackgroundImage;\r\n    }\r\n\r\n    public set verticalBarImage(value: Image) {\r\n        if (this._verticalBarBackgroundImage === value) {\r\n        }\r\n\r\n        this._verticalBarBackgroundImage = value;\r\n        let vb = <ImageScrollBar>this._verticalBar;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    private _setWindowPosition(force = true): void {\r\n        let ratio = this.host.idealRatio;\r\n        let windowContentsWidth = this._window._currentMeasure.width;\r\n        let windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (!force && this._oldWindowContentsWidth === windowContentsWidth && this._oldWindowContentsHeight === windowContentsHeight) {\r\n            return;\r\n        }\r\n\r\n        this._oldWindowContentsWidth = windowContentsWidth;\r\n        this._oldWindowContentsHeight = windowContentsHeight;\r\n\r\n        const _endLeft = this._clientWidth - windowContentsWidth;\r\n        const _endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        const newLeft = (this._horizontalBar.value / ratio) * _endLeft + \"px\";\r\n        const newTop = (this._verticalBar.value / ratio) * _endTop + \"px\";\r\n\r\n        if (newLeft !== this._window.left) {\r\n            this._window.left = newLeft;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n\r\n        if (newTop !== this._window.top) {\r\n            this._window.top = newTop;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    private _updateScroller(): void {\r\n        let windowContentsWidth = this._window._currentMeasure.width;\r\n        let windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth && !this.forceHorizontalBar) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._horizontalBar.isVisible && (windowContentsWidth > this._clientWidth || this.forceHorizontalBar)) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight && !this.forceVerticalBar) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._verticalBar.isVisible && (windowContentsHeight > this._clientHeight || this.forceVerticalBar)) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n\r\n        let ratio = this.host.idealRatio;\r\n\r\n        this._horizontalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientWidth / ratio) + \"px\";\r\n        this._verticalBar.thumbWidth = this._thumbLength *  0.9 * (this._clientHeight / ratio) + \"px\";\r\n    }\r\n\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addBar(barControl: ScrollBar | ImageScrollBar, barContainer: Rectangle, isVertical: boolean, rotation: number) {\r\n        barControl.paddingLeft = 0;\r\n        barControl.width = \"100%\";\r\n        barControl.height = \"100%\";\r\n        barControl.barOffset = 0;\r\n        barControl.value = 0;\r\n        barControl.maximum = 1;\r\n        barControl.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        barControl.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        barControl.isVertical = isVertical;\r\n        barControl.rotation = rotation;\r\n        barControl.isVisible = false;\r\n\r\n        barContainer.addControl(barControl);\r\n\r\n        barControl.onValueChangedObservable.add((value) => {\r\n            this._setWindowPosition();\r\n        });\r\n    }\r\n\r\n    /** @hidden */\r\n    private _attachWheel() {\r\n        if (!this._host || this._onWheelObserver) {\r\n            return;\r\n        }\r\n\r\n        this._onWheelObserver = this.onWheelObservable.add((pi) => {\r\n            if (!this._pointerIsOver) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if (pi.y < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if (pi.y > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if (pi.x < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if (pi.x > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onWheelObservable.remove(this._onWheelObserver);\r\n        this._onWheelObserver = null;\r\n        super.dispose();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.ScrollViewer\"] = ScrollViewer;", "import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observable, Observer } from \"@babylonjs/core/Misc/observable\";\r\n\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        var maxKey: Nullable<Button> = null;\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            var key = this._createKey(keys[i], properties);\r\n            if (!maxKey || key.heightInPixels > maxKey.heightInPixels) {\r\n                maxKey = key;\r\n            }\r\n\r\n            panel.addControl(key);\r\n        }\r\n\r\n        panel.height = maxKey ? maxKey.height : this.defaultButtonHeight;\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText): void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.VirtualKeyboard\"] = VirtualKeyboard;\r\n", "import { Control } from \"./control\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { Nullable } from '@babylonjs/core/types';\r\nimport { Measure } from '../measure';\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.DisplayGrid\"] = DisplayGrid;", "import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { Nullable } from '@babylonjs/core/types';\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                }\r\n                else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.ImageBasedSlider\"] = ImageBasedSlider;", "import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};", "import { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { IDisposable } from \"@babylonjs/core/scene\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}", "import { Nullable } from \"@babylonjs/core/types\";\nimport { Observable, Observer } from \"@babylonjs/core/Misc/observable\";\nimport { Vector2, Vector3, Matrix } from \"@babylonjs/core/Maths/math.vector\";\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\nimport { PointerInfoPre, PointerInfo, PointerEventTypes, PointerInfoBase } from '@babylonjs/core/Events/pointerEvents';\nimport { ClipboardEventTypes, ClipboardInfo } from \"@babylonjs/core/Events/clipboardEvents\";\nimport { KeyboardInfoPre, KeyboardEventTypes } from \"@babylonjs/core/Events/keyboardEvents\";\nimport { Camera } from \"@babylonjs/core/Cameras/camera\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport { DynamicTexture } from \"@babylonjs/core/Materials/Textures/dynamicTexture\";\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport { Layer } from \"@babylonjs/core/Layers/layer\";\nimport { Engine } from \"@babylonjs/core/Engines/engine\";\nimport { Scene } from \"@babylonjs/core/scene\";\n\nimport { Container } from \"./controls/container\";\nimport { Control } from \"./controls/control\";\nimport { Style } from \"./style\";\nimport { Measure } from \"./measure\";\nimport { Constants } from '@babylonjs/core/Engines/constants';\nimport { Viewport } from '@babylonjs/core/Maths/math.viewport';\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\n/**\n* Interface used to define a control that can receive focus\n*/\nexport interface IFocusableControl {\n    /**\n     * Function called when the control receives the focus\n     */\n    onFocus(): void;\n    /**\n     * Function called when the control loses the focus\n     */\n    onBlur(): void;\n    /**\n     * Function called to let the control handle keyboard events\n     * @param evt defines the current keyboard event\n     */\n    processKeyboard(evt: KeyboardEvent): void;\n    /**\n    * Function called to get the list of controls that should not steal the focus from this control\n    * @returns an array of controls\n    */\n    keepsFocusWith(): Nullable<Control[]>;\n}\n/**\n* Class used to create texture to support 2D GUI elements\n* @see https://doc.babylonjs.com/how_to/gui\n*/\nexport class AdvancedDynamicTexture extends DynamicTexture {\n    private _isDirty = false;\n    private _renderObserver: Nullable<Observer<Camera>>;\n    private _resizeObserver: Nullable<Observer<Engine>>;\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\n    private _canvasBlurObserver: Nullable<Observer<Engine>>;\n    private _background: string;\n    /** @hidden */\n    public _rootContainer = new Container(\"root\");\n    /** @hidden */\n    public _lastPickedControl: Control;\n    /** @hidden */\n    public _lastControlOver: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _lastControlDown: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _capturingControl: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _shouldBlockPointer: boolean;\n    /** @hidden */\n    public _layerToDispose: Nullable<Layer>;\n    /** @hidden */\n    public _linkedControls = new Array<Control>();\n    private _isFullscreen = false;\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\n    private _idealWidth = 0;\n    private _idealHeight = 0;\n    private _useSmallestIdeal: boolean = false;\n    private _renderAtIdealSize = false;\n    private _focusedControl: Nullable<IFocusableControl>;\n    private _blockNextFocusCheck = false;\n    private _renderScale = 1;\n    private _rootElement: Nullable<HTMLElement>;\n    private _cursorChanged = false;\n    private _defaultMousePointerId = 0;\n\n    /** @hidden */\n    public _numLayoutCalls = 0;\n    /** Gets the number of layout calls made the last time the ADT has been rendered */\n    public get numLayoutCalls(): number {\n        return this._numLayoutCalls;\n    }\n\n    /** @hidden */\n    public _numRenderCalls = 0;\n    /** Gets the number of render calls made the last time the ADT has been rendered */\n    public get numRenderCalls(): number {\n        return this._numRenderCalls;\n    }\n\n    /**\n    * Define type to string to ensure compatibility across browsers\n    * Safari doesn't support DataTransfer constructor\n    */\n    private _clipboardData: string = \"\";\n    /**\n    * Observable event triggered each time an clipboard event is received from the rendering canvas\n    */\n    public onClipboardObservable = new Observable<ClipboardInfo>();\n    /**\n    * Observable event triggered each time a pointer down is intercepted by a control\n    */\n    public onControlPickedObservable = new Observable<Control>();\n    /**\n    * Observable event triggered before layout is evaluated\n    */\n    public onBeginLayoutObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered after the layout was evaluated\n    */\n    public onEndLayoutObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered before the texture is rendered\n    */\n    public onBeginRenderObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered after the texture was rendered\n    */\n    public onEndRenderObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Gets or sets a boolean defining if alpha is stored as premultiplied\n    */\n    public premulAlpha = false;\n    /**\n     * Gets or sets a boolean indicating that the canvas must be reverted on Y when updating the texture\n     */\n    public applyYInversionOnUpdate = true;\n    /**\n    * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\n    * Useful when you want more antialiasing\n    */\n    public get renderScale(): number {\n        return this._renderScale;\n    }\n    public set renderScale(value: number) {\n        if (value === this._renderScale) {\n            return;\n        }\n        this._renderScale = value;\n        this._onResize();\n    }\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this.markAsDirty();\n    }\n    /**\n    * Gets or sets the ideal width used to design controls.\n    * The GUI will then rescale everything accordingly\n    * @see https://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get idealWidth(): number {\n        return this._idealWidth;\n    }\n    public set idealWidth(value: number) {\n        if (this._idealWidth === value) {\n            return;\n        }\n        this._idealWidth = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets the ideal height used to design controls.\n    * The GUI will then rescale everything accordingly\n    * @see https://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get idealHeight(): number {\n        return this._idealHeight;\n    }\n    public set idealHeight(value: number) {\n        if (this._idealHeight === value) {\n            return;\n        }\n        this._idealHeight = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\n    * @see https://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get useSmallestIdeal(): boolean {\n        return this._useSmallestIdeal;\n    }\n    public set useSmallestIdeal(value: boolean) {\n        if (this._useSmallestIdeal === value) {\n            return;\n        }\n        this._useSmallestIdeal = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets a boolean indicating if adaptive scaling must be used\n    * @see https://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get renderAtIdealSize(): boolean {\n        return this._renderAtIdealSize;\n    }\n    public set renderAtIdealSize(value: boolean) {\n        if (this._renderAtIdealSize === value) {\n            return;\n        }\n        this._renderAtIdealSize = value;\n        this._onResize();\n    }\n\n    /**\n     * Gets the ratio used when in \"ideal mode\"\n    * @see https://doc.babylonjs.com/how_to/gui#adaptive-scaling\n     * */\n    public get idealRatio(): number {\n        var rwidth: number = 0;\n        var rheight: number = 0;\n\n        if (this._idealWidth) {\n            rwidth = (this.getSize().width) / this._idealWidth;\n        }\n\n        if (this._idealHeight) {\n            rheight = (this.getSize().height) / this._idealHeight;\n        }\n\n        if (this._useSmallestIdeal && this._idealWidth && this._idealHeight) {\n            return window.innerWidth < window.innerHeight ? rwidth : rheight;\n        }\n\n        if (this._idealWidth) { // horizontal\n            return rwidth;\n        }\n\n        if (this._idealHeight) { // vertical\n            return rheight;\n        }\n\n        return 1;\n    }\n\n    /**\n    * Gets the underlying layer used to render the texture when in fullscreen mode\n    */\n    public get layer(): Nullable<Layer> {\n        return this._layerToDispose;\n    }\n    /**\n    * Gets the root container control\n    */\n    public get rootContainer(): Container {\n        return this._rootContainer;\n    }\n    /**\n    * Returns an array containing the root container.\n    * This is mostly used to let the Inspector introspects the ADT\n    * @returns an array containing the rootContainer\n    */\n    public getChildren(): Array<Container> {\n        return [this._rootContainer];\n    }\n    /**\n    * Will return all controls that are inside this texture\n    * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n    * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n    * @return all child controls\n    */\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\n    }\n    /**\n    * Gets or sets the current focused control\n    */\n    public get focusedControl(): Nullable<IFocusableControl> {\n        return this._focusedControl;\n    }\n    public set focusedControl(control: Nullable<IFocusableControl>) {\n        if (this._focusedControl == control) {\n            return;\n        }\n        if (this._focusedControl) {\n            this._focusedControl.onBlur();\n        }\n        if (control) {\n            control.onFocus();\n        }\n        this._focusedControl = control;\n    }\n    /**\n    * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\n    */\n    public get isForeground(): boolean {\n        if (!this.layer) {\n            return true;\n        }\n        return (!this.layer.isBackground);\n    }\n    public set isForeground(value: boolean) {\n        if (!this.layer) {\n            return;\n        }\n        if (this.layer.isBackground === !value) {\n            return;\n        }\n        this.layer.isBackground = !value;\n    }\n    /**\n    * Gets or set information about clipboardData\n    */\n    public get clipboardData(): string {\n        return this._clipboardData;\n    }\n    public set clipboardData(value: string) {\n        this._clipboardData = value;\n    }\n    /**\n   * Creates a new AdvancedDynamicTexture\n   * @param name defines the name of the texture\n   * @param width defines the width of the texture\n   * @param height defines the height of the texture\n   * @param scene defines the hosting scene\n   * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\n   * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\n   * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\n   */\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE, invertY?: boolean) {\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Constants.TEXTUREFORMAT_RGBA, invertY);\n        scene = this.getScene();\n        if (!scene || !this._texture) {\n            return;\n        }\n        this._rootElement = scene.getEngine()!.getInputElement()!;\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\n            if (!this._focusedControl) {\n                return;\n            }\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\n                this._focusedControl.processKeyboard(info.event);\n            }\n            info.skipOnPointerObservable = true;\n        });\n        this._rootContainer._link(this);\n        this.hasAlpha = true;\n        if (!width || !height) {\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\n            this._onResize();\n        }\n        this._texture.isReady = true;\n    }\n    /**\n    * Get the current class name of the texture useful for serialization or dynamic coding.\n    * @returns \"AdvancedDynamicTexture\"\n    */\n    public getClassName(): string {\n        return \"AdvancedDynamicTexture\";\n    }\n    /**\n    * Function used to execute a function on all controls\n    * @param func defines the function to execute\n    * @param container defines the container where controls belong. If null the root container will be used\n    */\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\n        if (!container) {\n            container = this._rootContainer;\n        }\n        func(container);\n        for (var child of container.children) {\n            if ((<any>child).children) {\n                this.executeOnAllControls(func, (<Container>child));\n                continue;\n            }\n            func(child);\n        }\n    }\n\n    private _useInvalidateRectOptimization = true;\n\n    /**\n     * Gets or sets a boolean indicating if the InvalidateRect optimization should be turned on\n     */\n    public get useInvalidateRectOptimization(): boolean {\n        return this._useInvalidateRectOptimization;\n    }\n\n    public set useInvalidateRectOptimization(value: boolean) {\n        this._useInvalidateRectOptimization = value;\n    }\n\n    // Invalidated rectangle which is the combination of all invalidated controls after they have been rotated into absolute position\n    private _invalidatedRectangle: Nullable<Measure> = null;\n    /**\n     * Invalidates a rectangle area on the gui texture\n     * @param invalidMinX left most position of the rectangle to invalidate in the texture\n     * @param invalidMinY top most position of the rectangle to invalidate in the texture\n     * @param invalidMaxX right most position of the rectangle to invalidate in the texture\n     * @param invalidMaxY bottom most position of the rectangle to invalidate in the texture\n     */\n    public invalidateRect(invalidMinX: number, invalidMinY: number, invalidMaxX: number, invalidMaxY: number) {\n        if (!this._useInvalidateRectOptimization) {\n            return;\n        }\n        if (!this._invalidatedRectangle) {\n            this._invalidatedRectangle = new Measure(invalidMinX, invalidMinY, invalidMaxX - invalidMinX + 1, invalidMaxY - invalidMinY + 1);\n        } else {\n            // Compute intersection\n            var maxX = Math.ceil(Math.max(this._invalidatedRectangle.left + this._invalidatedRectangle.width - 1, invalidMaxX));\n            var maxY = Math.ceil(Math.max(this._invalidatedRectangle.top + this._invalidatedRectangle.height - 1, invalidMaxY));\n            this._invalidatedRectangle.left = Math.floor(Math.min(this._invalidatedRectangle.left, invalidMinX));\n            this._invalidatedRectangle.top = Math.floor(Math.min(this._invalidatedRectangle.top, invalidMinY));\n            this._invalidatedRectangle.width = maxX - this._invalidatedRectangle.left + 1;\n            this._invalidatedRectangle.height = maxY - this._invalidatedRectangle.top + 1;\n        }\n    }\n    /**\n    * Marks the texture as dirty forcing a complete update\n    */\n    public markAsDirty() {\n        this._isDirty = true;\n    }\n    /**\n    * Helper function used to create a new style\n    * @returns a new style\n    * @see https://doc.babylonjs.com/how_to/gui#styles\n    */\n    public createStyle(): Style {\n        return new Style(this);\n    }\n    /**\n    * Adds a new control to the root container\n    * @param control defines the control to add\n    * @returns the current texture\n    */\n    public addControl(control: Control): AdvancedDynamicTexture {\n        this._rootContainer.addControl(control);\n        return this;\n    }\n    /**\n    * Removes a control from the root container\n    * @param control defines the control to remove\n    * @returns the current texture\n    */\n    public removeControl(control: Control): AdvancedDynamicTexture {\n        this._rootContainer.removeControl(control);\n        return this;\n    }\n    /**\n    * Release all resources\n    */\n    public dispose(): void {\n        let scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._rootElement = null;\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\n        if (this._resizeObserver) {\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\n        }\n        if (this._pointerMoveObserver) {\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\n        }\n        if (this._pointerObserver) {\n            scene.onPointerObservable.remove(this._pointerObserver);\n        }\n        if (this._preKeyboardObserver) {\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\n        }\n        if (this._canvasPointerOutObserver) {\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\n        }\n        if (this._canvasBlurObserver) {\n            scene.getEngine().onCanvasBlurObservable.remove(this._canvasBlurObserver);\n        }\n        if (this._layerToDispose) {\n            this._layerToDispose.texture = null;\n            this._layerToDispose.dispose();\n            this._layerToDispose = null;\n        }\n        this._rootContainer.dispose();\n        this.onClipboardObservable.clear();\n        this.onControlPickedObservable.clear();\n        this.onBeginRenderObservable.clear();\n        this.onEndRenderObservable.clear();\n        this.onBeginLayoutObservable.clear();\n        this.onEndLayoutObservable.clear();\n        super.dispose();\n    }\n    private _onResize(): void {\n        let scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        // Check size\n        var engine = scene.getEngine();\n        var textureSize = this.getSize();\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\n\n        if (this._renderAtIdealSize) {\n            if (this._idealWidth) {\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\n                renderWidth = this._idealWidth;\n            } else if (this._idealHeight) {\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\n                renderHeight = this._idealHeight;\n            }\n        }\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\n            this.scaleTo(renderWidth, renderHeight);\n            this.markAsDirty();\n            if (this._idealWidth || this._idealHeight) {\n                this._rootContainer._markAllAsDirty();\n            }\n        }\n        this.invalidateRect(0, 0, textureSize.width - 1, textureSize.height - 1);\n    }\n    /** @hidden */\n    public _getGlobalViewport(scene: Scene): Viewport {\n        var engine = scene.getEngine();\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\n    }\n    /**\n    * Get screen coordinates for a vector3\n    * @param position defines the position to project\n    * @param worldMatrix defines the world matrix to use\n    * @returns the projected position\n    */\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\n        var scene = this.getScene();\n        if (!scene) {\n            return Vector2.Zero();\n        }\n        var globalViewport = this._getGlobalViewport(scene);\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\n        projectedPosition.scaleInPlace(this.renderScale);\n        return new Vector2(projectedPosition.x, projectedPosition.y);\n    }\n    /**\n    * Get screen coordinates for a vector3\n    * @param position defines the position to project\n    * @param worldMatrix defines the world matrix to use\n    * @returns the projected position with Z\n    */\n    public getProjectedPositionWithZ(position: Vector3, worldMatrix: Matrix): Vector3 {\n        var scene = this.getScene();\n        if (!scene) {\n            return Vector3.Zero();\n        }\n        var globalViewport = this._getGlobalViewport(scene);\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\n        projectedPosition.scaleInPlace(this.renderScale);\n        return new Vector3(projectedPosition.x, projectedPosition.y, projectedPosition.z);\n    }\n    private _checkUpdate(camera: Camera): void {\n        if (this._layerToDispose) {\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\n                return;\n            }\n        }\n        if (this._isFullscreen && this._linkedControls.length) {\n            var scene = this.getScene();\n            if (!scene) {\n                return;\n            }\n            var globalViewport = this._getGlobalViewport(scene);\n            for (let control of this._linkedControls) {\n                if (!control.isVisible) {\n                    continue;\n                }\n                let mesh = control._linkedMesh as AbstractMesh;\n                if (!mesh || mesh.isDisposed()) {\n                    Tools.SetImmediate(() => {\n                        control.linkWithMesh(null);\n                    });\n                    continue;\n                }\n                let position = mesh.getBoundingInfo ? mesh.getBoundingInfo().boundingSphere.center : (Vector3.ZeroReadOnly as Vector3);\n                let projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\n                    control.notRenderable = true;\n                    continue;\n                }\n                control.notRenderable = false;\n                // Account for RenderScale.\n                projectedPosition.scaleInPlace(this.renderScale);\n                control._moveToProjectedPosition(projectedPosition);\n            }\n        }\n        if (!this._isDirty && !this._rootContainer.isDirty) {\n            return;\n        }\n        this._isDirty = false;\n        this._render();\n        this.update(this.applyYInversionOnUpdate, this.premulAlpha);\n    }\n\n    private _clearMeasure = new Measure(0, 0, 0, 0);\n\n    private _render(): void {\n        var textureSize = this.getSize();\n        var renderWidth = textureSize.width;\n        var renderHeight = textureSize.height;\n\n        var context = this.getContext();\n        context.font = \"18px Arial\";\n        context.strokeStyle = \"white\";\n\n        // Layout\n        this.onBeginLayoutObservable.notifyObservers(this);\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\n        this._numLayoutCalls = 0;\n        this._rootContainer._layout(measure, context);\n        this.onEndLayoutObservable.notifyObservers(this);\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\n\n        // Clear\n        if (this._invalidatedRectangle) {\n            this._clearMeasure.copyFrom(this._invalidatedRectangle);\n        } else {\n            this._clearMeasure.copyFromFloats(0, 0, renderWidth, renderHeight);\n        }\n        context.clearRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\n        if (this._background) {\n            context.save();\n            context.fillStyle = this._background;\n            context.fillRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\n            context.restore();\n        }\n\n        // Render\n        this.onBeginRenderObservable.notifyObservers(this);\n        this._numRenderCalls = 0;\n        this._rootContainer._render(context, this._invalidatedRectangle);\n        this.onEndRenderObservable.notifyObservers(this);\n        this._invalidatedRectangle = null;\n    }\n    /** @hidden */\n    public _changeCursor(cursor: string) {\n        if (this._rootElement) {\n            this._rootElement.style.cursor = cursor;\n            this._cursorChanged = true;\n        }\n    }\n    /** @hidden */\n    public _registerLastControlDown(control: Control, pointerId: number) {\n        this._lastControlDown[pointerId] = control;\n        this.onControlPickedObservable.notifyObservers(control);\n    }\n    private _doPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        var engine = scene.getEngine();\n        var textureSize = this.getSize();\n        if (this._isFullscreen) {\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\n            let viewport = camera!.viewport;\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\n        }\n        if (this._capturingControl[pointerId]) {\n            this._capturingControl[pointerId]._processObservables(type, x, y, pi, pointerId, buttonIndex);\n            return;\n        }\n\n        this._cursorChanged = false;\n        if (!this._rootContainer._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\n            this._changeCursor(\"\");\n            if (type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi);\n                    delete this._lastControlOver[pointerId];\n                }\n            }\n        }\n\n        if (!this._cursorChanged) {\n            this._changeCursor(\"\");\n        }\n        this._manageFocus();\n    }\n    /** @hidden */\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\n        for (var pointerId in list) {\n            if (!list.hasOwnProperty(pointerId)) {\n                continue;\n            }\n            var lastControlOver = list[pointerId];\n            if (lastControlOver === control) {\n                delete list[pointerId];\n            }\n        }\n    }\n    /** @hidden */\n    public _cleanControlAfterRemoval(control: Control) {\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\n    }\n    /** Attach to all scene events required to support pointer events */\n    public attach(): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n\n        let tempViewport = new Viewport(0, 0, 0, 0);\n\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\n                return;\n            }\n            if (pi.type !== PointerEventTypes.POINTERMOVE\n                && pi.type !== PointerEventTypes.POINTERUP\n                && pi.type !== PointerEventTypes.POINTERDOWN\n                && pi.type !== PointerEventTypes.POINTERWHEEL) {\n                return;\n            }\n            if (!scene) {\n                return;\n            }\n\n            if (pi.type === PointerEventTypes.POINTERMOVE && (pi.event as PointerEvent).pointerId) {\n                this._defaultMousePointerId = (pi.event as PointerEvent).pointerId; // This is required to make sure we have the correct pointer ID for wheel\n            }\n\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\n            let engine = scene.getEngine();\n\n            if (!camera) {\n                tempViewport.x = 0;\n                tempViewport.y = 0;\n                tempViewport.width = engine.getRenderWidth();\n                tempViewport.height = engine.getRenderHeight();\n            } else {\n                camera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), tempViewport);\n            }\n\n            let x = scene.pointerX / engine.getHardwareScalingLevel() - tempViewport.x;\n            let y = scene.pointerY / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - tempViewport.y - tempViewport.height);\n            this._shouldBlockPointer = false;\n            // Do picking modifies _shouldBlockPointer\n            let pointerId = (pi.event as PointerEvent).pointerId || this._defaultMousePointerId;\n            this._doPicking(x, y, pi, pi.type, pointerId, pi.event.button, (<MouseWheelEvent>pi.event).deltaX, (<MouseWheelEvent>pi.event).deltaY);\n            // Avoid overwriting a true skipOnPointerObservable to false\n            if (this._shouldBlockPointer) {\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\n            }\n        });\n        this._attachToOnPointerOut(scene);\n        this._attachToOnBlur(scene);\n    }\n    /** @hidden */\n    private onClipboardCopy = (rawEvt: Event) => {\n        const evt = rawEvt as ClipboardEvent;\n        let ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /** @hidden */\n    private onClipboardCut = (rawEvt: Event) => {\n        const evt = rawEvt as ClipboardEvent;\n        let ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /** @hidden */\n    private onClipboardPaste = (rawEvt: Event) => {\n        const evt = rawEvt as ClipboardEvent;\n        let ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /**\n    * Register the clipboard Events onto the canvas\n    */\n    public registerClipboardEvents(): void {\n        self.addEventListener(\"copy\", this.onClipboardCopy, false);\n        self.addEventListener(\"cut\", this.onClipboardCut, false);\n        self.addEventListener(\"paste\", this.onClipboardPaste, false);\n    }\n    /**\n     * Unregister the clipboard Events from the canvas\n     */\n    public unRegisterClipboardEvents(): void {\n        self.removeEventListener(\"copy\", this.onClipboardCopy);\n        self.removeEventListener(\"cut\", this.onClipboardCut);\n        self.removeEventListener(\"paste\", this.onClipboardPaste);\n    }\n    /**\n    * Connect the texture to a hosting mesh to enable interactions\n    * @param mesh defines the mesh to attach to\n    * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\n    */\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\n            if (pi.type !== PointerEventTypes.POINTERMOVE\n                && pi.type !== PointerEventTypes.POINTERUP\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\n                return;\n            }\n\n            var pointerId = (pi.event as PointerEvent).pointerId || this._defaultMousePointerId;\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\n                var uv = pi.pickInfo.getTextureCoordinates();\n                if (uv) {\n                    let size = this.getSize();\n                    this._doPicking(uv.x * size.width, (this.applyYInversionOnUpdate ? (1.0 - uv.y) : uv.y) * size.height, pi, pi.type, pointerId, pi.event.button);\n                }\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\n                if (this._lastControlDown[pointerId]) {\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\n                }\n                delete this._lastControlDown[pointerId];\n                if (this.focusedControl) {\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\n                    let canMoveFocus = true;\n                    if (friendlyControls) {\n                        for (var control of friendlyControls) {\n                            // Same host, no need to keep the focus\n                            if (this === control._host) {\n                                continue;\n                            }\n                            // Different hosts\n                            const otherHost = control._host;\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\n                                canMoveFocus = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (canMoveFocus) {\n                        this.focusedControl = null;\n                    }\n                }\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi, true);\n                }\n                delete this._lastControlOver[pointerId];\n            }\n        });\n        mesh.enablePointerMoveEvents = supportPointerMove;\n        this._attachToOnPointerOut(scene);\n        this._attachToOnBlur(scene);\n    }\n    /**\n    * Move the focus to a specific control\n    * @param control defines the control which will receive the focus\n    */\n    public moveFocusToControl(control: IFocusableControl): void {\n        this.focusedControl = control;\n        this._lastPickedControl = <any>control;\n        this._blockNextFocusCheck = true;\n    }\n    private _manageFocus(): void {\n        if (this._blockNextFocusCheck) {\n            this._blockNextFocusCheck = false;\n            this._lastPickedControl = <any>this._focusedControl;\n            return;\n        }\n        // Focus management\n        if (this._focusedControl) {\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\n                if (this._lastPickedControl.isFocusInvisible) {\n                    return;\n                }\n                this.focusedControl = null;\n            }\n        }\n    }\n    private _attachToOnPointerOut(scene: Scene): void {\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\n            if (this._lastControlOver[pointerEvent.pointerId]) {\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId], null);\n            }\n            delete this._lastControlOver[pointerEvent.pointerId];\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\n                delete this._lastControlDown[pointerEvent.pointerId];\n            }\n        });\n    }\n    private _attachToOnBlur(scene: Scene): void {\n        this._canvasBlurObserver = scene.getEngine().onCanvasBlurObservable.add((pointerEvent) => {\n            Object.entries(this._lastControlDown).forEach(([key, value]) => {\n                value._onCanvasBlur();\n            });\n            this._lastControlDown = {};\n        });\n    }\n    // Statics\n    /**\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\n     * @param mesh defines the mesh which will receive the texture\n     * @param width defines the texture width (1024 by default)\n     * @param height defines the texture height (1024 by default)\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\n     * @returns a new AdvancedDynamicTexture\n     */\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false, invertY?: boolean): AdvancedDynamicTexture {\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE, invertY);\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\n        material.backFaceCulling = false;\n        material.diffuseColor = Color3.Black();\n        material.specularColor = Color3.Black();\n        if (onlyAlphaTesting) {\n            material.diffuseTexture = result;\n            material.emissiveTexture = result;\n            result.hasAlpha = true;\n        } else {\n            material.emissiveTexture = result;\n            material.opacityTexture = result;\n        }\n        mesh.material = material;\n        result.attachToMesh(mesh, supportPointerMove);\n        return result;\n    }\n\n    /**\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh) BUT do not create a new material for the mesh. You will be responsible for connecting the texture\n     * @param mesh defines the mesh which will receive the texture\n     * @param width defines the texture width (1024 by default)\n     * @param height defines the texture height (1024 by default)\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\n     * @returns a new AdvancedDynamicTexture\n     */\n    public static CreateForMeshTexture(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, invertY?: boolean): AdvancedDynamicTexture {\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE, invertY);\n        result.attachToMesh(mesh, supportPointerMove);\n        return result;\n    }\n    /**\n    * Creates a new AdvancedDynamicTexture in fullscreen mode.\n    * In this mode the texture will rely on a layer for its rendering.\n    * This allows it to be treated like any other layer.\n    * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\n    * LayerMask is set through advancedTexture.layer.layerMask\n    * @param name defines name for the texture\n    * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\n    * @param scene defines the hsoting scene\n    * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\n    * @returns a new AdvancedDynamicTexture\n    */\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\n        // Display\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\n        layer.texture = result;\n        result._layerToDispose = layer;\n        result._isFullscreen = true;\n        // Attach\n        result.attach();\n        return result;\n    }\n}\n", "\r\nimport { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { PerfCounter } from \"@babylonjs/core/Misc/perfCounter\";\r\nimport { IDisposable } from \"@babylonjs/core/scene\";\r\n\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * This class can be used to get instrumentation data from a AdvancedDynamicTexture object\r\n */\r\nexport class AdvancedDynamicTextureInstrumentation implements IDisposable {\r\n    private _captureRenderTime = false;\r\n    private _renderTime = new PerfCounter();\r\n\r\n    private _captureLayoutTime = false;\r\n    private _layoutTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onBeginLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets the perf counter used to capture render time\r\n     */\r\n    public get renderTimeCounter(): PerfCounter {\r\n        return this._renderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used to capture layout time\r\n     */\r\n    public get layoutTimeCounter(): PerfCounter {\r\n        return this._layoutTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render time capture\r\n     */\r\n    public get captureRenderTime(): boolean {\r\n        return this._captureRenderTime;\r\n    }\r\n\r\n    public set captureRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginRenderObserver = this.texture.onBeginRenderObservable.add(() => {\r\n                this._renderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndRenderObserver = this.texture.onEndRenderObservable.add(() => {\r\n                this._renderTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n            this._onBeginRenderObserver = null;\r\n            this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n            this._onEndRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the layout time capture\r\n     */\r\n    public get captureLayoutTime(): boolean {\r\n        return this._captureLayoutTime;\r\n    }\r\n\r\n    public set captureLayoutTime(value: boolean) {\r\n        if (value === this._captureLayoutTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureLayoutTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginLayoutObserver = this.texture.onBeginLayoutObservable.add(() => {\r\n                this._layoutTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndLayoutObserver = this.texture.onEndLayoutObservable.add(() => {\r\n                this._layoutTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n            this._onBeginLayoutObserver = null;\r\n            this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n            this._onEndLayoutObserver = null;\r\n        }\r\n    }\r\n    /**\r\n     * Instantiates a new advanced dynamic texture instrumentation.\r\n     * This class can be used to get instrumentation data from an AdvancedDynamicTexture object\r\n     * @param texture Defines the AdvancedDynamicTexture to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented AdvancedDynamicTexture.\r\n         */\r\n        public texture: AdvancedDynamicTexture) {\r\n    }\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n        this._onBeginRenderObserver = null;\r\n        this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n        this._onEndRenderObserver = null;\r\n        this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n        this._onBeginLayoutObserver = null;\r\n        this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n        this._onEndLayoutObserver = null;\r\n\r\n        (<any>this.texture) = null;\r\n    }\r\n}", "import { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n* Class used to load GUI via XML.\r\n*/\r\nexport class XmlLoader {\r\n    private _nodes: any = {};\r\n\r\n    private _nodeTypes: any = {\r\n        element: 1,\r\n        attribute: 2,\r\n        text: 3\r\n    };\r\n\r\n    private _isLoaded: boolean = false;\r\n\r\n    private _objectAttributes: any = {\r\n        \"textHorizontalAlignment\": 1,\r\n        \"textVerticalAlignment\": 2,\r\n        \"horizontalAlignment\": 3,\r\n        \"verticalAlignment\": 4,\r\n        \"stretch\": 5,\r\n    };\r\n\r\n    private _parentClass: any;\r\n\r\n    /**\r\n    * Create a new xml loader\r\n    * @param parentClass Sets the class context. Used when the loader is instanced inside a class and not in a global context\r\n    */\r\n    constructor(parentClass = null) {\r\n        if (parentClass) {\r\n            this._parentClass = parentClass;\r\n        }\r\n    }\r\n\r\n    private _getChainElement(attributeValue: any): any {\r\n        let element: any = window;\r\n\r\n        if (this._parentClass) {\r\n            element = this._parentClass;\r\n        }\r\n        let value = attributeValue;\r\n        value = value.split(\".\");\r\n\r\n        for (let i = 0; i < value.length; i++) {\r\n            element = element[value[i]];\r\n        }\r\n        return element;\r\n\r\n    }\r\n\r\n    private _getClassAttribute(attributeName: string): any {\r\n        const attribute = attributeName.split(\".\");\r\n        const className = _TypeStore.GetClass(\"BABYLON.GUI.\" + attribute[0]);\r\n        return className[attribute[1]];\r\n    }\r\n\r\n    private _createGuiElement(node: any, parent: any, linkParent: boolean = true): void {\r\n        try {\r\n            let className = _TypeStore.GetClass(\"BABYLON.GUI.\" + node.nodeName);\r\n            let guiNode = new className();\r\n\r\n            if (parent && linkParent) {\r\n                parent.addControl(guiNode);\r\n            }\r\n\r\n            for (let i = 0; i < node.attributes.length; i++) {\r\n\r\n                if (node.attributes[i].name.toLowerCase().includes(\"datasource\")) {\r\n                    continue;\r\n                }\r\n\r\n                if (node.attributes[i].name.toLowerCase().includes(\"observable\")) {\r\n\r\n                    let element = this._getChainElement(node.attributes[i].value);\r\n                    guiNode[node.attributes[i].name].add(element);\r\n\r\n                    continue;\r\n                } else if (node.attributes[i].name == \"linkWithMesh\") {\r\n                    if (this._parentClass) {\r\n                        guiNode.linkWithMesh(this._parentClass[node.attributes[i].value]);\r\n                    } else {\r\n                        guiNode.linkWithMesh(window[node.attributes[i].value]);\r\n                    }\r\n                } else if (node.attributes[i].value.startsWith(\"{{\") && node.attributes[i].value.endsWith(\"}}\")) {\r\n                    let element = this._getChainElement(node.attributes[i].value.substring(2, node.attributes[i].value.length - 2));\r\n                    guiNode[node.attributes[i].name] = element;\r\n                } else if (!this._objectAttributes[node.attributes[i].name]) {\r\n                    if (node.attributes[i].value == \"true\" || node.attributes[i].value == \"false\") {\r\n                        guiNode[node.attributes[i].name] = (node.attributes[i].value == 'true');\r\n                    } else {\r\n                        guiNode[node.attributes[i].name] = !isNaN(Number(node.attributes[i].value)) ? Number(node.attributes[i].value) : node.attributes[i].value;\r\n                    }\r\n                } else {\r\n                    guiNode[node.attributes[i].name] = this._getClassAttribute(node.attributes[i].value);\r\n                }\r\n            }\r\n\r\n            if (!node.attributes.getNamedItem(\"id\")) {\r\n                this._nodes[node.nodeName + Object.keys(this._nodes).length + \"_gen\"] = guiNode;\r\n                return guiNode;\r\n            }\r\n\r\n            let id = node.attributes.getNamedItem(\"id\").value;\r\n            if (id.startsWith(\"{{\") && id.endsWith(\"}}\")) {\r\n                id = this._getChainElement(id.substring(2, id.length - 2));\r\n            }\r\n\r\n            if (!this._nodes[id]) {\r\n                this._nodes[id] = guiNode;\r\n            } else {\r\n                throw \"XmlLoader Exception : Duplicate ID, every element should have an unique ID attribute\";\r\n            }\r\n            return guiNode;\r\n\r\n        } catch (e) {\r\n            throw \"XmlLoader Exception : Error parsing Control \" + node.nodeName + \",\" + e + \".\";\r\n        }\r\n    }\r\n\r\n    private _parseGrid(node: any, guiNode: any, parent: any): void {\r\n        let width;\r\n        let height;\r\n        let columns;\r\n        let rows = node.children;\r\n        let cells;\r\n        let isPixel = false;\r\n        let cellNode;\r\n        let rowNumber = -1;\r\n        let columnNumber = -1;\r\n        let totalColumnsNumber = 0;\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            if (rows[i].nodeType != this._nodeTypes.element) {\r\n                continue;\r\n            }\r\n            if (rows[i].nodeName != \"Row\") {\r\n                throw \"XmlLoader Exception : Expecting Row node, received \" + rows[i].nodeName;\r\n            }\r\n            rowNumber += 1;\r\n            columns = rows[i].children;\r\n\r\n            if (!rows[i].attributes.getNamedItem(\"height\")) {\r\n                throw \"XmlLoader Exception : Height must be defined for grid rows\";\r\n            }\r\n            height = Number(rows[i].attributes.getNamedItem(\"height\").nodeValue);\r\n            isPixel = rows[i].attributes.getNamedItem(\"isPixel\") ? JSON.parse(rows[i].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n            guiNode.addRowDefinition(height, isPixel);\r\n\r\n            for (let j = 0; j < columns.length; j++) {\r\n                if (columns[j].nodeType != this._nodeTypes.element) {\r\n                    continue;\r\n                }\r\n                if (columns[j].nodeName != \"Column\") {\r\n                    throw \"XmlLoader Exception : Expecting Column node, received \" + columns[j].nodeName;\r\n                }\r\n                columnNumber += 1;\r\n                if (rowNumber > 0 && columnNumber > totalColumnsNumber) {\r\n                    throw \"XmlLoader Exception : In the Grid element, the number of columns is defined in the first row, do not add more columns in the subsequent rows.\";\r\n                }\r\n\r\n                if (rowNumber == 0) {\r\n                    if (!columns[j].attributes.getNamedItem(\"width\")) {\r\n                        throw \"XmlLoader Exception : Width must be defined for all the grid columns in the first row\";\r\n                    }\r\n                    width = Number(columns[j].attributes.getNamedItem(\"width\").nodeValue);\r\n                    isPixel = columns[j].attributes.getNamedItem(\"isPixel\") ? JSON.parse(columns[j].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n                    guiNode.addColumnDefinition(width, isPixel);\r\n                }\r\n\r\n                cells = columns[j].children;\r\n\r\n                for (let k = 0; k < cells.length; k++) {\r\n                    if (cells[k].nodeType != this._nodeTypes.element) {\r\n                        continue;\r\n                    }\r\n                    cellNode = this._createGuiElement(cells[k], guiNode, false);\r\n                    guiNode.addControl(cellNode, rowNumber, columnNumber);\r\n                    if (cells[k].firstChild) {\r\n                        this._parseXml(cells[k].firstChild, cellNode);\r\n                    }\r\n                }\r\n            }\r\n            if (rowNumber == 0) {\r\n                totalColumnsNumber = columnNumber;\r\n            }\r\n            columnNumber = -1;\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _parseElement(node: any, guiNode: any, parent: any): void {\r\n\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode);\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _prepareSourceElement(node: any, guiNode: any, variable: any, source: any, iterator: any): void {\r\n        if (this._parentClass) {\r\n            this._parentClass[variable] = source[iterator];\r\n        } else {\r\n            window[variable] = source[iterator];\r\n        }\r\n\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode, true);\r\n        }\r\n    }\r\n\r\n    private _parseElementsFromSource(node: any, guiNode: any, parent: any): void {\r\n        let dataSource = node.attributes.getNamedItem(\"dataSource\").value;\r\n        if (!dataSource.includes(\" in \")) {\r\n            throw \"XmlLoader Exception : Malformed XML, Data Source must include an in\";\r\n        } else {\r\n            let isArray = true;\r\n            let splittedSource = dataSource.split(\" in \");\r\n            if (splittedSource.length < 2) {\r\n                throw \"XmlLoader Exception : Malformed XML, Data Source must an iterator and a source\";\r\n            }\r\n            let source = splittedSource[1];\r\n            if (source.startsWith(\"{\") && source.endsWith(\"}\")) {\r\n                isArray = false;\r\n            }\r\n\r\n            if (!isArray || (source.startsWith(\"[\") && source.endsWith(\"]\"))) {\r\n                source = source.substring(1, source.length - 1);\r\n            }\r\n\r\n            if (this._parentClass) {\r\n                source = this._parentClass[source];\r\n            } else {\r\n                source = window[source];\r\n            }\r\n\r\n            if (isArray) {\r\n                for (let i = 0; i < source.length; i++) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            } else {\r\n                for (let i in source) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            }\r\n\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _parseXml(node: any, parent: any, generated: boolean = false): void {\r\n\r\n        if (node.nodeType != this._nodeTypes.element) {\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent, generated);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (generated) {\r\n            node.setAttribute(\"id\", parent.id + (parent._children.length + 1));\r\n        }\r\n\r\n        let guiNode = this._createGuiElement(node, parent);\r\n\r\n        if (node.nodeName == \"Grid\") {\r\n            this._parseGrid(node, guiNode, parent);\r\n        } else if (!node.attributes.getNamedItem(\"dataSource\")) {\r\n            this._parseElement(node, guiNode, parent);\r\n        } else {\r\n            this._parseElementsFromSource(node, guiNode, parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets if the loading has finished.\r\n     * @returns whether the loading has finished or not\r\n    */\r\n    public isLoaded(): boolean {\r\n        return this._isLoaded;\r\n    }\r\n\r\n    /**\r\n     * Gets a loaded node / control by id.\r\n     * @param id the Controls id set in the xml\r\n     * @returns element of type Control\r\n    */\r\n    public getNodeById(id: string): any {\r\n        return this._nodes[id];\r\n    }\r\n\r\n    /**\r\n     * Gets all loaded nodes / controls\r\n     * @returns Array of controls\r\n    */\r\n    public getNodes(): any {\r\n        return this._nodes;\r\n    }\r\n\r\n    /**\r\n     * Initiates the xml layout loading\r\n     * @param xmlFile defines the xml layout to load\r\n     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.\r\n     * @param callback defines the callback called on layout load.\r\n     */\r\n    public loadLayout(xmlFile: any, rootNode: any, callback: any): void {\r\n        let xhttp = new XMLHttpRequest();\r\n        xhttp.onreadystatechange = function(this: XmlLoader) {\r\n            if (xhttp.readyState == 4 && xhttp.status == 200) {\r\n                if (!xhttp.responseXML) {\r\n                    throw \"XmlLoader Exception : XML file is malformed or corrupted.\";\r\n                }\r\n\r\n                let xmlDoc = xhttp.responseXML.documentElement;\r\n                this._parseXml(xmlDoc.firstChild, rootNode);\r\n                this._isLoaded = true;\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            }\r\n        }.bind(this);\r\n\r\n        xhttp.open(\"GET\", xmlFile, true);\r\n        xhttp.send();\r\n    }\r\n}", "import { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}", "import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { PointerEventTypes } from \"@babylonjs/core/Events/pointerEvents\";\r\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { IBehaviorAware, Behavior } from \"@babylonjs/core/Behaviors/behavior\";\r\nimport { IDisposable, Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see https://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see https://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see https://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see https://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            this._downCount++;\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount--;\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (this._downCount < 0) {\r\n            // Handle if forcePointerUp was called prior to this\r\n            this._downCount = 0;\r\n            return;\r\n        }\r\n\r\n        if (this._downCount == 0) {\r\n            if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n                this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n            }\r\n            this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n            if (this.pointerUpAnimation) {\r\n                this.pointerUpAnimation();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n            if (this._downCount > 0) {\r\n                this._downCount = 1;\r\n                this._onPointerUp(this, Vector3.Zero(), 0, 0, true);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP || type === PointerEventTypes.POINTERDOUBLETAP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}", "import { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}", "import { int, Nullable } from \"@babylonjs/core/types\";\r\nimport { Vector4 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { BoxBuilder } from \"@babylonjs/core/Meshes/Builders/boxBuilder\";\r\nimport { Material } from \"@babylonjs/core/Materials/material\";\r\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n        else {\r\n            this._facadeTexture.rootContainer.clearControls();\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = BoxBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}", "import { Nullable } from \"@babylonjs/core/types\";\r\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n", "import { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { Matrix, Vector3, TmpVectors } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { int } from \"@babylonjs/core/types\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = TmpVectors.Vector3[0];\r\n            let diff = TmpVectors.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n", "import { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { float } from \"@babylonjs/core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Axis, Space } from '@babylonjs/core/Maths/math.axis';\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, TmpVectors.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\r\n    }\r\n}\r\n", "import { Effect } from \"@babylonjs/core/Materials/effect\";\n\nlet name = 'fluentVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n\nuniform mat4 world;\nuniform mat4 viewProjection;\nvarying vec2 vUV;\n#ifdef BORDER\nvarying vec2 scaleInfo;\nuniform float borderWidth;\nuniform vec3 scaleFactor;\n#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;\n#endif\nvoid main(void) {\nvUV=uv;\n#ifdef BORDER\nvec3 scale=scaleFactor;\nfloat minScale=min(min(scale.x,scale.y),scale.z);\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\nfloat areaYZ=scale.y*scale.z;\nfloat areaXZ=scale.x*scale.z;\nfloat areaXY=scale.x*scale.y;\nfloat scaledBorderWidth=borderWidth;\nif (abs(normal.x) == 1.0)\n{\nscale.x=scale.y;\nscale.y=scale.z;\nif (areaYZ>areaXZ && areaYZ>areaXY)\n{\nscaledBorderWidth*=minOverMiddleScale;\n}\n}\nelse if (abs(normal.y) == 1.0)\n{\nscale.x=scale.z;\nif (areaXZ>areaXY && areaXZ>areaYZ)\n{\nscaledBorderWidth*=minOverMiddleScale;\n}\n}\nelse\n{\nif (areaXY>areaYZ && areaXY>areaXZ)\n{\nscaledBorderWidth*=minOverMiddleScale;\n}\n}\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\nif (scale.x>scale.y)\n{\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\nscaleInfo.y=1.0-scaledBorderWidth;\n}\nelse\n{\nscaleInfo.x=1.0-scaledBorderWidth;\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\n}\n#endif\nvec4 worldPos=world*vec4(position,1.0);\n#ifdef HOVERLIGHT\nworldPosition=worldPos.xyz;\n#endif\ngl_Position=viewProjection*worldPos;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var fluentVertexShader = { name, shader };\n", "import { Effect } from \"@babylonjs/core/Materials/effect\";\n\nlet name = 'fluentPixelShader';\nlet shader = `precision highp float;\nvarying vec2 vUV;\nuniform vec4 albedoColor;\n#ifdef INNERGLOW\nuniform vec4 innerGlowColor;\n#endif\n#ifdef BORDER\nvarying vec2 scaleInfo;\nuniform float edgeSmoothingValue;\nuniform float borderMinValue;\n#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;\nuniform vec3 hoverPosition;\nuniform vec4 hoverColor;\nuniform float hoverRadius;\n#endif\n#ifdef TEXTURE\nuniform sampler2D albedoSampler;\n#endif\nvoid main(void) {\nvec3 albedo=albedoColor.rgb;\nfloat alpha=albedoColor.a;\n#ifdef TEXTURE\nalbedo=texture2D(albedoSampler,vUV).rgb;\n#endif\n#ifdef HOVERLIGHT\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\n#else\nfloat pointToHover=1.0;\n#endif\n#ifdef BORDER\nfloat borderPower=10.0;\nfloat inverseBorderPower=1.0/borderPower;\nvec3 borderColor=albedo*borderPower;\nvec2 distanceToEdge;\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover);\nalbedo+=borderColor;\nalpha=max(alpha,borderValue);\n#endif\n#ifdef INNERGLOW\n\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\nuvGlow=uvGlow*uvGlow;\nuvGlow=uvGlow*uvGlow;\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y);\n#endif\ngl_FragColor=vec4(albedo,alpha);\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var fluentPixelShader = { name, shader };\n", "import { Nullable } from \"@babylonjs/core/types\";\r\nimport { serializeAsColor4, serializeAsVector3, serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Vector3, Matrix, TmpVectors } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines\";\r\nimport { IEffectCreationOptions } from \"@babylonjs/core/Materials/effect\";\r\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { SubMesh } from \"@babylonjs/core/Meshes/subMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\nimport { Color3, Color4 } from '@babylonjs/core/Maths/math.color';\r\n\r\nimport \"./shaders/fluent.vertex\";\r\nimport \"./shaders/fluent.fragment\";\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, TmpVectors.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", TmpVectors.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.FluentMaterial\"] = FluentMaterial;", "import { Button3D } from \"./button3D\";\r\n\r\nimport { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { PlaneBuilder } from \"@babylonjs/core/Meshes/Builders/planeBuilder\";\r\nimport { BoxBuilder } from \"@babylonjs/core/Meshes/Builders/boxBuilder\";\r\nimport { FadeInOutBehavior } from \"@babylonjs/core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = PlaneBuilder.CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            var tooltipBackground = PlaneBuilder.CreatePlane(\"\", { size: 1, sideOrientation: Mesh.DOUBLESIDE }, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = BoxBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = BoxBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}", "import { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}", "import { TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = TmpVectors.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n", "import { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { float } from \"@babylonjs/core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = TmpVectors.Vector2[0];\r\n            let difference = TmpVectors.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}", "import { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { float } from \"@babylonjs/core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Axis, Space } from '@babylonjs/core/Maths/math.axis';\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, TmpVectors.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\r\n    }\r\n}\r\n", "import { Tools } from \"@babylonjs/core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, TmpVectors.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, TmpVectors.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n", "import { Nullable } from \"@babylonjs/core/types\";\r\nimport { Observable, Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { PointerInfo, PointerEventTypes } from '@babylonjs/core/Events/pointerEvents';\r\nimport { Material } from \"@babylonjs/core/Materials/material\";\r\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { UtilityLayerRenderer } from \"@babylonjs/core/Rendering/utilityLayerRenderer\";\r\nimport { EngineStore } from \"@babylonjs/core/Engines/engineStore\";\r\nimport { IDisposable, Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see https://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || EngineStore.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.shouldRender || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
